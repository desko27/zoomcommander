/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.AddCustomizedStringResourceParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.AddCustomizedURLResourceParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.AllowLocalRecordingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.AuthParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.AuthWithJwtTokenParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.CallOutH323Params', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.CanStartRecordingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ClearAnnotationParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ConfigDSCPParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.CreateRendererParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DeleteMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DestroyRendererParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisAllowLocalRecordingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EditMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EditMeetingWithWndParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAutoAdjustMicParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAutoJoinAudioParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableClaimHostFeatureParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableDualScreenModeParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableHDVideoParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableHardwareEncodeParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableMicOriginalInputParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableShareIOSDeviceParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableShareWhiteBoardParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableSplitScreenModeParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableSpotlightSelfParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableStereoAudioParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableToolTipsShowParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.EnterFullScreenParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ExitFullScreenParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ForceDisableMultiShareParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.GetRawDataTypeParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.GetResolutionParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.GetUserIdParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.GetUserInfoByUserIDParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HidePollOnMeetingUIParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HideQAOnMeetingUIParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HideSwitchCameraButtonParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.InitSDKParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.InputMeetingScreenNameParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.IsSupportLocalRecordingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.JoinMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.JoinWithoutLoginParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.LeaveMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.LoginParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.LoginWithSSOTokenParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.MoveFloatVideoWndParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.MuteAudioParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.MuteVideoParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.PinVideoParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RedoParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.RetrieveParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SelectMicParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SelectSpeakerParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SelectVideoCameraParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetColorParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetEchoCancellationLevelParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetFloatVideoPosParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetLineWidthParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetMeetingUIPosParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetMicVolParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetRawDataResolutionParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetRecordingPathParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetShowCallInTabParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetShowCallMeTabParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetShowH323SubTabPageParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetSpeakerVolParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetTeamIdentifierParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SetToolParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ShowChatDlgParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ShowParticipantsListWndParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ShowSettingDlgParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.ShowSharingToolbarParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SpotlightVideoParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.StartAnnotationParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.StartAppShareParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.StartMeetingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.StartMonitorShareParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.StartRecordingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.StartWithoutLoginParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.StopAnnotationParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SubscribeParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.SwitchSplitScreenModeParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.TryWithMeetingNumberParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.TryWithPairingCodeParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.UnMuteVideoParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.UnSubscribeParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.UndoParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.UnmuteAudioParams', null, global);
goog.exportSymbol('proto.com.electron.sdk.proto.VerifyParams', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.InitSDKParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.InitSDKParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.InitSDKParams.displayName = 'proto.com.electron.sdk.proto.InitSDKParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.InitSDKParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.InitSDKParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.InitSDKParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getField(msg, 1),
    domain: jspb.Message.getField(msg, 2),
    customizedlanguagename: jspb.Message.getField(msg, 3),
    customizedlanguageinfo: jspb.Message.getField(msg, 4),
    customizedlanguagetype: jspb.Message.getField(msg, 5),
    strsupporturl: jspb.Message.getField(msg, 6),
    langid: jspb.Message.getField(msg, 7),
    enablelog: jspb.Message.getField(msg, 8),
    applocale: jspb.Message.getField(msg, 9),
    logfilesize: jspb.Message.getField(msg, 10),
    enablegeneraldump: jspb.Message.getField(msg, 11),
    permonitorawarenessmode: jspb.Message.getField(msg, 12),
    videorendermode: jspb.Message.getField(msg, 13),
    videorawdatamemorymode: jspb.Message.getField(msg, 14),
    sharerawdatamemorymode: jspb.Message.getField(msg, 15),
    audiorawdatamemorymode: jspb.Message.getField(msg, 16),
    enablerawdataintermediatemode: jspb.Message.getField(msg, 17),
    renderpostprocessing: jspb.Message.getField(msg, 18),
    videocapturemethod: jspb.Message.getField(msg, 19)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.InitSDKParams}
 */
proto.com.electron.sdk.proto.InitSDKParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.InitSDKParams;
  return proto.com.electron.sdk.proto.InitSDKParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.InitSDKParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.InitSDKParams}
 */
proto.com.electron.sdk.proto.InitSDKParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomizedlanguagename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomizedlanguageinfo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCustomizedlanguagetype(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrsupporturl(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLangid(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablelog(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplocale(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLogfilesize(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablegeneraldump(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPermonitorawarenessmode(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVideorendermode(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVideorawdatamemorymode(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSharerawdatamemorymode(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAudiorawdatamemorymode(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablerawdataintermediatemode(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRenderpostprocessing(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVideocapturemethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.InitSDKParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.InitSDKParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.InitSDKParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeInt32(
      19,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setPath = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearPath = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string domain = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setDomain = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearDomain = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasDomain = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string customizedLanguageName = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getCustomizedlanguagename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setCustomizedlanguagename = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearCustomizedlanguagename = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasCustomizedlanguagename = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string customizedLanguageInfo = 4;
 * @return {string}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getCustomizedlanguageinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setCustomizedlanguageinfo = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearCustomizedlanguageinfo = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasCustomizedlanguageinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 customizedLanguageType = 5;
 * @return {number}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getCustomizedlanguagetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setCustomizedlanguagetype = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearCustomizedlanguagetype = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasCustomizedlanguagetype = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string strSupportUrl = 6;
 * @return {string}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getStrsupporturl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setStrsupporturl = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearStrsupporturl = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasStrsupporturl = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 langID = 7;
 * @return {number}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getLangid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setLangid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearLangid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasLangid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool enableLog = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getEnablelog = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setEnablelog = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearEnablelog = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasEnablelog = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 appLocale = 9;
 * @return {number}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getApplocale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setApplocale = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearApplocale = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasApplocale = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 logFileSize = 10;
 * @return {number}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getLogfilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setLogfilesize = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearLogfilesize = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasLogfilesize = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool enableGeneralDump = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getEnablegeneraldump = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setEnablegeneraldump = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearEnablegeneraldump = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasEnablegeneraldump = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool permonitorAwarenessMode = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getPermonitorawarenessmode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setPermonitorawarenessmode = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearPermonitorawarenessmode = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasPermonitorawarenessmode = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 videoRenderMode = 13;
 * @return {number}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getVideorendermode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setVideorendermode = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearVideorendermode = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasVideorendermode = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 videoRawdataMemoryMode = 14;
 * @return {number}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getVideorawdatamemorymode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setVideorawdatamemorymode = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearVideorawdatamemorymode = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasVideorawdatamemorymode = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int32 shareRawdataMemoryMode = 15;
 * @return {number}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getSharerawdatamemorymode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setSharerawdatamemorymode = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearSharerawdatamemorymode = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasSharerawdatamemorymode = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional int32 audioRawdataMemoryMode = 16;
 * @return {number}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getAudiorawdatamemorymode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setAudiorawdatamemorymode = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearAudiorawdatamemorymode = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasAudiorawdatamemorymode = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bool enableRawdataIntermediateMode = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getEnablerawdataintermediatemode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 17, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setEnablerawdataintermediatemode = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearEnablerawdataintermediatemode = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasEnablerawdataintermediatemode = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional int32 renderPostProcessing = 18;
 * @return {number}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getRenderpostprocessing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setRenderpostprocessing = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearRenderpostprocessing = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasRenderpostprocessing = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional int32 videoCaptureMethod = 19;
 * @return {number}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.getVideocapturemethod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.InitSDKParams.prototype.setVideocapturemethod = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.com.electron.sdk.proto.InitSDKParams.prototype.clearVideocapturemethod = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InitSDKParams.prototype.hasVideocapturemethod = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.AuthParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.AuthParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.AuthParams.displayName = 'proto.com.electron.sdk.proto.AuthParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.AuthParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.AuthParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.AuthParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AuthParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getField(msg, 1),
    secret: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.AuthParams}
 */
proto.com.electron.sdk.proto.AuthParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.AuthParams;
  return proto.com.electron.sdk.proto.AuthParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.AuthParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.AuthParams}
 */
proto.com.electron.sdk.proto.AuthParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.AuthParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.AuthParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.AuthParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AuthParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.AuthParams.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.AuthParams.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.AuthParams.prototype.clearKey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.AuthParams.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string secret = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.AuthParams.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.AuthParams.prototype.setSecret = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.AuthParams.prototype.clearSecret = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.AuthParams.prototype.hasSecret = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.AuthWithJwtTokenParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.AuthWithJwtTokenParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.AuthWithJwtTokenParams.displayName = 'proto.com.electron.sdk.proto.AuthWithJwtTokenParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.AuthWithJwtTokenParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.AuthWithJwtTokenParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.AuthWithJwtTokenParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AuthWithJwtTokenParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdkjwttoken: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.AuthWithJwtTokenParams}
 */
proto.com.electron.sdk.proto.AuthWithJwtTokenParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.AuthWithJwtTokenParams;
  return proto.com.electron.sdk.proto.AuthWithJwtTokenParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.AuthWithJwtTokenParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.AuthWithJwtTokenParams}
 */
proto.com.electron.sdk.proto.AuthWithJwtTokenParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkjwttoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.AuthWithJwtTokenParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.AuthWithJwtTokenParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.AuthWithJwtTokenParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AuthWithJwtTokenParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sdkJwtToken = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.AuthWithJwtTokenParams.prototype.getSdkjwttoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.AuthWithJwtTokenParams.prototype.setSdkjwttoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.AuthWithJwtTokenParams.prototype.clearSdkjwttoken = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.AuthWithJwtTokenParams.prototype.hasSdkjwttoken = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.LoginParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.LoginParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.LoginParams.displayName = 'proto.com.electron.sdk.proto.LoginParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.LoginParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.LoginParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.LoginParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.LoginParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getField(msg, 1),
    psw: jspb.Message.getField(msg, 2),
    rememberme: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.LoginParams}
 */
proto.com.electron.sdk.proto.LoginParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.LoginParams;
  return proto.com.electron.sdk.proto.LoginParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.LoginParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.LoginParams}
 */
proto.com.electron.sdk.proto.LoginParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPsw(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRememberme(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.LoginParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.LoginParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.LoginParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.LoginParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string userName = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.LoginParams.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.LoginParams.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.LoginParams.prototype.clearUsername = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.LoginParams.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string psw = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.LoginParams.prototype.getPsw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.LoginParams.prototype.setPsw = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.LoginParams.prototype.clearPsw = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.LoginParams.prototype.hasPsw = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool rememberMe = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.LoginParams.prototype.getRememberme = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.LoginParams.prototype.setRememberme = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.LoginParams.prototype.clearRememberme = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.LoginParams.prototype.hasRememberme = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.LoginWithSSOTokenParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.LoginWithSSOTokenParams.displayName = 'proto.com.electron.sdk.proto.LoginWithSSOTokenParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.LoginWithSSOTokenParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.LoginWithSSOTokenParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    ssotoken: jspb.Message.getField(msg, 1),
    rememberme: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.LoginWithSSOTokenParams}
 */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.LoginWithSSOTokenParams;
  return proto.com.electron.sdk.proto.LoginWithSSOTokenParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.LoginWithSSOTokenParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.LoginWithSSOTokenParams}
 */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsotoken(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRememberme(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.LoginWithSSOTokenParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.LoginWithSSOTokenParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string ssoToken = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams.prototype.getSsotoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams.prototype.setSsotoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.LoginWithSSOTokenParams.prototype.clearSsotoken = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams.prototype.hasSsotoken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool rememberMe = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams.prototype.getRememberme = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams.prototype.setRememberme = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.LoginWithSSOTokenParams.prototype.clearRememberme = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.LoginWithSSOTokenParams.prototype.hasRememberme = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.StartMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.StartMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.StartMeetingParams.displayName = 'proto.com.electron.sdk.proto.StartMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.StartMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.StartMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StartMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    meetingnumber: jspb.Message.getField(msg, 1),
    hdirectshareappwnd: jspb.Message.getField(msg, 2),
    participantid: jspb.Message.getField(msg, 3),
    isvideooff: jspb.Message.getField(msg, 4),
    isaudiooff: jspb.Message.getField(msg, 5),
    isdirectsharedesktop: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.StartMeetingParams}
 */
proto.com.electron.sdk.proto.StartMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.StartMeetingParams;
  return proto.com.electron.sdk.proto.StartMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.StartMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.StartMeetingParams}
 */
proto.com.electron.sdk.proto.StartMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMeetingnumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHdirectshareappwnd(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParticipantid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsvideooff(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsaudiooff(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdirectsharedesktop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.StartMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.StartMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StartMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional uint64 meetingNumber = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.getMeetingnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.setMeetingnumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.StartMeetingParams.prototype.clearMeetingnumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.hasMeetingnumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string hDirectShareAppWnd = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.getHdirectshareappwnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.setHdirectshareappwnd = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.StartMeetingParams.prototype.clearHdirectshareappwnd = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.hasHdirectshareappwnd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string participantID = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.getParticipantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.setParticipantid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.StartMeetingParams.prototype.clearParticipantid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.hasParticipantid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool isVideoOff = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.getIsvideooff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.setIsvideooff = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.com.electron.sdk.proto.StartMeetingParams.prototype.clearIsvideooff = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.hasIsvideooff = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool isAudioOff = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.getIsaudiooff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.setIsaudiooff = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.com.electron.sdk.proto.StartMeetingParams.prototype.clearIsaudiooff = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.hasIsaudiooff = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool isDirectShareDesktop = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.getIsdirectsharedesktop = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.setIsdirectsharedesktop = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.com.electron.sdk.proto.StartMeetingParams.prototype.clearIsdirectsharedesktop = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartMeetingParams.prototype.hasIsdirectsharedesktop = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.StartWithoutLoginParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.StartWithoutLoginParams.displayName = 'proto.com.electron.sdk.proto.StartWithoutLoginParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.StartWithoutLoginParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.StartWithoutLoginParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    userzak: jspb.Message.getField(msg, 2),
    username: jspb.Message.getField(msg, 3),
    nodeusertype: jspb.Message.getField(msg, 4),
    meetingnumber: jspb.Message.getField(msg, 5),
    sdkvanityid: jspb.Message.getField(msg, 6),
    hdirectshareappwnd: jspb.Message.getField(msg, 7),
    participantid: jspb.Message.getField(msg, 8),
    isdirectsharedesktop: jspb.Message.getField(msg, 9),
    isvideooff: jspb.Message.getField(msg, 10),
    isaudiooff: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.StartWithoutLoginParams}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.StartWithoutLoginParams;
  return proto.com.electron.sdk.proto.StartWithoutLoginParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.StartWithoutLoginParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.StartWithoutLoginParams}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserzak(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeusertype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMeetingnumber(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkvanityid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setHdirectshareappwnd(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setParticipantid(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdirectsharedesktop(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsvideooff(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsaudiooff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.StartWithoutLoginParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.StartWithoutLoginParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string userZAK = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.getUserzak = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.setUserzak = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.clearUserzak = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.hasUserzak = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string userName = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.clearUsername = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 nodeUserType = 4;
 * @return {number}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.getNodeusertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.setNodeusertype = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.clearNodeusertype = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.hasNodeusertype = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 meetingNumber = 5;
 * @return {number}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.getMeetingnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.setMeetingnumber = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.clearMeetingnumber = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.hasMeetingnumber = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string sdkVanityID = 6;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.getSdkvanityid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.setSdkvanityid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.clearSdkvanityid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.hasSdkvanityid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string hDirectShareAppWnd = 7;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.getHdirectshareappwnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.setHdirectshareappwnd = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.clearHdirectshareappwnd = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.hasHdirectshareappwnd = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string participantID = 8;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.getParticipantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.setParticipantid = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.clearParticipantid = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.hasParticipantid = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool isDirectShareDesktop = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.getIsdirectsharedesktop = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.setIsdirectsharedesktop = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.clearIsdirectsharedesktop = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.hasIsdirectsharedesktop = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool isVideoOff = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.getIsvideooff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.setIsvideooff = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.clearIsvideooff = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.hasIsvideooff = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool isAudioOff = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.getIsaudiooff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.setIsaudiooff = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.clearIsaudiooff = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartWithoutLoginParams.prototype.hasIsaudiooff = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.JoinMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.JoinMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.JoinMeetingParams.displayName = 'proto.com.electron.sdk.proto.JoinMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.JoinMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.JoinMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.JoinMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    meetingnumber: jspb.Message.getField(msg, 1),
    vanityid: jspb.Message.getField(msg, 2),
    username: jspb.Message.getField(msg, 3),
    psw: jspb.Message.getField(msg, 4),
    hdirectshareappwnd: jspb.Message.getField(msg, 5),
    participantid: jspb.Message.getField(msg, 6),
    webinartoken: jspb.Message.getField(msg, 7),
    isvideooff: jspb.Message.getField(msg, 8),
    isaudiooff: jspb.Message.getField(msg, 9),
    isdirectsharedesktop: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.JoinMeetingParams}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.JoinMeetingParams;
  return proto.com.electron.sdk.proto.JoinMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.JoinMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.JoinMeetingParams}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMeetingnumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVanityid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPsw(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHdirectshareappwnd(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setParticipantid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebinartoken(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsvideooff(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsaudiooff(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdirectsharedesktop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.JoinMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.JoinMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.JoinMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional uint64 meetingNumber = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.getMeetingnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.setMeetingnumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.JoinMeetingParams.prototype.clearMeetingnumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.hasMeetingnumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string vanityID = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.getVanityid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.setVanityid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.JoinMeetingParams.prototype.clearVanityid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.hasVanityid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string userName = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.JoinMeetingParams.prototype.clearUsername = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string psw = 4;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.getPsw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.setPsw = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.com.electron.sdk.proto.JoinMeetingParams.prototype.clearPsw = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.hasPsw = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string hDirectShareAppWnd = 5;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.getHdirectshareappwnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.setHdirectshareappwnd = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.com.electron.sdk.proto.JoinMeetingParams.prototype.clearHdirectshareappwnd = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.hasHdirectshareappwnd = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string participantID = 6;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.getParticipantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.setParticipantid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.com.electron.sdk.proto.JoinMeetingParams.prototype.clearParticipantid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.hasParticipantid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string webinarToken = 7;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.getWebinartoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.setWebinartoken = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.com.electron.sdk.proto.JoinMeetingParams.prototype.clearWebinartoken = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.hasWebinartoken = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool isVideoOff = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.getIsvideooff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.setIsvideooff = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.com.electron.sdk.proto.JoinMeetingParams.prototype.clearIsvideooff = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.hasIsvideooff = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool isAudioOff = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.getIsaudiooff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.setIsaudiooff = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.com.electron.sdk.proto.JoinMeetingParams.prototype.clearIsaudiooff = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.hasIsaudiooff = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool isDirectShareDesktop = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.getIsdirectsharedesktop = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.setIsdirectsharedesktop = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.com.electron.sdk.proto.JoinMeetingParams.prototype.clearIsdirectsharedesktop = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinMeetingParams.prototype.hasIsdirectsharedesktop = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.JoinWithoutLoginParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.JoinWithoutLoginParams.displayName = 'proto.com.electron.sdk.proto.JoinWithoutLoginParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.JoinWithoutLoginParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.JoinWithoutLoginParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    meetingnumber: jspb.Message.getField(msg, 1),
    vanityid: jspb.Message.getField(msg, 2),
    username: jspb.Message.getField(msg, 3),
    psw: jspb.Message.getField(msg, 4),
    hdirectshareappwnd: jspb.Message.getField(msg, 5),
    userzak: jspb.Message.getField(msg, 6),
    participantid: jspb.Message.getField(msg, 7),
    webinartoken: jspb.Message.getField(msg, 8),
    isdirectsharedesktop: jspb.Message.getField(msg, 9),
    isvideooff: jspb.Message.getField(msg, 10),
    isaudiooff: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.JoinWithoutLoginParams}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.JoinWithoutLoginParams;
  return proto.com.electron.sdk.proto.JoinWithoutLoginParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.JoinWithoutLoginParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.JoinWithoutLoginParams}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMeetingnumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVanityid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPsw(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHdirectshareappwnd(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserzak(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setParticipantid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebinartoken(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdirectsharedesktop(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsvideooff(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsaudiooff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.JoinWithoutLoginParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.JoinWithoutLoginParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional uint64 meetingNumber = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.getMeetingnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.setMeetingnumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.clearMeetingnumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.hasMeetingnumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string vanityID = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.getVanityid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.setVanityid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.clearVanityid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.hasVanityid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string userName = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.clearUsername = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string psw = 4;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.getPsw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.setPsw = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.clearPsw = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.hasPsw = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string hDirectShareAppWnd = 5;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.getHdirectshareappwnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.setHdirectshareappwnd = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.clearHdirectshareappwnd = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.hasHdirectshareappwnd = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string userZAK = 6;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.getUserzak = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.setUserzak = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.clearUserzak = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.hasUserzak = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string participantID = 7;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.getParticipantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.setParticipantid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.clearParticipantid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.hasParticipantid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string webinarToken = 8;
 * @return {string}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.getWebinartoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.setWebinartoken = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.clearWebinartoken = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.hasWebinartoken = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool isDirectShareDesktop = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.getIsdirectsharedesktop = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.setIsdirectsharedesktop = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.clearIsdirectsharedesktop = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.hasIsdirectsharedesktop = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool isVideoOff = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.getIsvideooff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.setIsvideooff = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.clearIsvideooff = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.hasIsvideooff = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool isAudioOff = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.getIsaudiooff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.setIsaudiooff = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.clearIsaudiooff = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.JoinWithoutLoginParams.prototype.hasIsaudiooff = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.LeaveMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.LeaveMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.LeaveMeetingParams.displayName = 'proto.com.electron.sdk.proto.LeaveMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.LeaveMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.LeaveMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.LeaveMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.LeaveMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bend: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.LeaveMeetingParams}
 */
proto.com.electron.sdk.proto.LeaveMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.LeaveMeetingParams;
  return proto.com.electron.sdk.proto.LeaveMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.LeaveMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.LeaveMeetingParams}
 */
proto.com.electron.sdk.proto.LeaveMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.LeaveMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.LeaveMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.LeaveMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.LeaveMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnd = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.LeaveMeetingParams.prototype.getBend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.LeaveMeetingParams.prototype.setBend = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.LeaveMeetingParams.prototype.clearBend = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.LeaveMeetingParams.prototype.hasBend = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.displayName = 'proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocolaction: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams}
 */
proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams;
  return proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams}
 */
proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocolaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string protocolAction = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.prototype.getProtocolaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.prototype.setProtocolaction = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.prototype.clearProtocolaction = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams.prototype.hasProtocolaction = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ShowChatDlgParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ShowChatDlgParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ShowChatDlgParams.displayName = 'proto.com.electron.sdk.proto.ShowChatDlgParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ShowChatDlgParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ShowChatDlgParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    hparent: jspb.Message.getField(msg, 1),
    rectleft: jspb.Message.getField(msg, 2),
    recttop: jspb.Message.getField(msg, 3),
    rectright: jspb.Message.getField(msg, 4),
    rectbottom: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ShowChatDlgParams}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ShowChatDlgParams;
  return proto.com.electron.sdk.proto.ShowChatDlgParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ShowChatDlgParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ShowChatDlgParams}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHparent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRectleft(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecttop(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRectright(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRectbottom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ShowChatDlgParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ShowChatDlgParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string hParent = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.getHparent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.setHparent = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.clearHparent = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.hasHparent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string rectLeft = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.getRectleft = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.setRectleft = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.clearRectleft = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.hasRectleft = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string rectTop = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.getRecttop = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.setRecttop = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.clearRecttop = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.hasRecttop = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string rectRight = 4;
 * @return {string}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.getRectright = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.setRectright = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.clearRectright = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.hasRectright = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string rectBottom = 5;
 * @return {string}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.getRectbottom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.setRectbottom = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.clearRectbottom = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowChatDlgParams.prototype.hasRectbottom = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnterFullScreenParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnterFullScreenParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnterFullScreenParams.displayName = 'proto.com.electron.sdk.proto.EnterFullScreenParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnterFullScreenParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnterFullScreenParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnterFullScreenParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnterFullScreenParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bfirstview: jspb.Message.getField(msg, 1),
    bsecview: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnterFullScreenParams}
 */
proto.com.electron.sdk.proto.EnterFullScreenParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnterFullScreenParams;
  return proto.com.electron.sdk.proto.EnterFullScreenParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnterFullScreenParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnterFullScreenParams}
 */
proto.com.electron.sdk.proto.EnterFullScreenParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBfirstview(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBsecview(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnterFullScreenParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnterFullScreenParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnterFullScreenParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnterFullScreenParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool bFirstView = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnterFullScreenParams.prototype.getBfirstview = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnterFullScreenParams.prototype.setBfirstview = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnterFullScreenParams.prototype.clearBfirstview = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnterFullScreenParams.prototype.hasBfirstview = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bSecView = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnterFullScreenParams.prototype.getBsecview = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnterFullScreenParams.prototype.setBsecview = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.EnterFullScreenParams.prototype.clearBsecview = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnterFullScreenParams.prototype.hasBsecview = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ExitFullScreenParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ExitFullScreenParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ExitFullScreenParams.displayName = 'proto.com.electron.sdk.proto.ExitFullScreenParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ExitFullScreenParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ExitFullScreenParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ExitFullScreenParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ExitFullScreenParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bfirstview: jspb.Message.getField(msg, 1),
    bsecview: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ExitFullScreenParams}
 */
proto.com.electron.sdk.proto.ExitFullScreenParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ExitFullScreenParams;
  return proto.com.electron.sdk.proto.ExitFullScreenParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ExitFullScreenParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ExitFullScreenParams}
 */
proto.com.electron.sdk.proto.ExitFullScreenParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBfirstview(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBsecview(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ExitFullScreenParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ExitFullScreenParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ExitFullScreenParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ExitFullScreenParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool bFirstView = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.ExitFullScreenParams.prototype.getBfirstview = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.ExitFullScreenParams.prototype.setBfirstview = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ExitFullScreenParams.prototype.clearBfirstview = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ExitFullScreenParams.prototype.hasBfirstview = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bSecView = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.ExitFullScreenParams.prototype.getBsecview = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.ExitFullScreenParams.prototype.setBsecview = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.ExitFullScreenParams.prototype.clearBsecview = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ExitFullScreenParams.prototype.hasBsecview = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.MoveFloatVideoWndParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.MoveFloatVideoWndParams.displayName = 'proto.com.electron.sdk.proto.MoveFloatVideoWndParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.MoveFloatVideoWndParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.MoveFloatVideoWndParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    left: jspb.Message.getField(msg, 1),
    top: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.MoveFloatVideoWndParams}
 */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.MoveFloatVideoWndParams;
  return proto.com.electron.sdk.proto.MoveFloatVideoWndParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.MoveFloatVideoWndParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.MoveFloatVideoWndParams}
 */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeft(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.MoveFloatVideoWndParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.MoveFloatVideoWndParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string left = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams.prototype.getLeft = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.MoveFloatVideoWndParams.prototype.clearLeft = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string top = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams.prototype.getTop = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams.prototype.setTop = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.MoveFloatVideoWndParams.prototype.clearTop = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.MoveFloatVideoWndParams.prototype.hasTop = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ShowSharingToolbarParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ShowSharingToolbarParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ShowSharingToolbarParams.displayName = 'proto.com.electron.sdk.proto.ShowSharingToolbarParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ShowSharingToolbarParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ShowSharingToolbarParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ShowSharingToolbarParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowSharingToolbarParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bshow: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ShowSharingToolbarParams}
 */
proto.com.electron.sdk.proto.ShowSharingToolbarParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ShowSharingToolbarParams;
  return proto.com.electron.sdk.proto.ShowSharingToolbarParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ShowSharingToolbarParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ShowSharingToolbarParams}
 */
proto.com.electron.sdk.proto.ShowSharingToolbarParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ShowSharingToolbarParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ShowSharingToolbarParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ShowSharingToolbarParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowSharingToolbarParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bShow = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.ShowSharingToolbarParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.ShowSharingToolbarParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ShowSharingToolbarParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowSharingToolbarParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.displayName = 'proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    floatvideotype: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams}
 */
proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams;
  return proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams}
 */
proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFloatvideotype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 floatVideoType = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.prototype.getFloatvideotype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.prototype.setFloatvideotype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.prototype.clearFloatvideotype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams.prototype.hasFloatvideotype = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ShowParticipantsListWndParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ShowParticipantsListWndParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ShowParticipantsListWndParams.displayName = 'proto.com.electron.sdk.proto.ShowParticipantsListWndParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ShowParticipantsListWndParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ShowParticipantsListWndParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ShowParticipantsListWndParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowParticipantsListWndParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bshow: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ShowParticipantsListWndParams}
 */
proto.com.electron.sdk.proto.ShowParticipantsListWndParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ShowParticipantsListWndParams;
  return proto.com.electron.sdk.proto.ShowParticipantsListWndParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ShowParticipantsListWndParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ShowParticipantsListWndParams}
 */
proto.com.electron.sdk.proto.ShowParticipantsListWndParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ShowParticipantsListWndParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ShowParticipantsListWndParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ShowParticipantsListWndParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowParticipantsListWndParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bShow = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.ShowParticipantsListWndParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.ShowParticipantsListWndParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ShowParticipantsListWndParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowParticipantsListWndParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.displayName = 'proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bshow: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams}
 */
proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams;
  return proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams}
 */
proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bShow = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowBottomFloatToolbarWndParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.displayName = 'proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bpageup: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams}
 */
proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams;
  return proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams}
 */
proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBpageup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bPageUp = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.prototype.getBpageup = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.prototype.setBpageup = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.prototype.clearBpageup = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowPreOrNextPageVideoParams.prototype.hasBpageup = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.displayName = 'proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bshow: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams}
 */
proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams;
  return proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams}
 */
proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bShow = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowSharingFrameWindowsParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SwitchSplitScreenModeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SwitchSplitScreenModeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.displayName = 'proto.com.electron.sdk.proto.SwitchSplitScreenModeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SwitchSplitScreenModeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bsplit: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SwitchSplitScreenModeParams}
 */
proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SwitchSplitScreenModeParams;
  return proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SwitchSplitScreenModeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SwitchSplitScreenModeParams}
 */
proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBsplit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SwitchSplitScreenModeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bSplit = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.prototype.getBsplit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.prototype.setBsplit = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.prototype.clearBsplit = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SwitchSplitScreenModeParams.prototype.hasBsplit = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.displayName = 'proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    minimizeuimode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams}
 */
proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams;
  return proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams}
 */
proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinimizeuimode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 minimizeUIMOde = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.prototype.getMinimizeuimode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.prototype.setMinimizeuimode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.prototype.clearMinimizeuimode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams.prototype.hasMinimizeuimode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.displayName = 'proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    btodisplayshare: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams}
 */
proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams;
  return proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams}
 */
proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBtodisplayshare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bToDisplayShare = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.prototype.getBtodisplayshare = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.prototype.setBtodisplayshare = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.prototype.clearBtodisplayshare = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SwapToShowShareViewOrVideoParams.prototype.hasBtodisplayshare = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ShowSettingDlgParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ShowSettingDlgParams.displayName = 'proto.com.electron.sdk.proto.ShowSettingDlgParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ShowSettingDlgParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ShowSettingDlgParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    hparent: jspb.Message.getField(msg, 1),
    left: jspb.Message.getField(msg, 2),
    top: jspb.Message.getField(msg, 3),
    hsettingwnd: jspb.Message.getField(msg, 4),
    bshow: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ShowSettingDlgParams}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ShowSettingDlgParams;
  return proto.com.electron.sdk.proto.ShowSettingDlgParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ShowSettingDlgParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ShowSettingDlgParams}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHparent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeft(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTop(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHsettingwnd(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ShowSettingDlgParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ShowSettingDlgParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string hParent = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.getHparent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.setHparent = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.clearHparent = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.hasHparent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string left = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.getLeft = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.clearLeft = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string top = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.getTop = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.setTop = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.clearTop = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.hasTop = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string hSettingWnd = 4;
 * @return {string}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.getHsettingwnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.setHsettingwnd = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.clearHsettingwnd = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.hasHsettingwnd = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool bShow = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ShowSettingDlgParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.displayName = 'proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    hselfwnd: jspb.Message.getField(msg, 1),
    hparent: jspb.Message.getField(msg, 2),
    left: jspb.Message.getField(msg, 3),
    top: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams}
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams;
  return proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams}
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHselfwnd(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHparent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeft(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string hSelfWnd = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.getHselfwnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.setHselfwnd = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.clearHselfwnd = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.hasHselfwnd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string hParent = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.getHparent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.setHparent = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.clearHparent = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.hasHparent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string left = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.getLeft = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.clearLeft = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string top = 4;
 * @return {string}
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.getTop = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.setTop = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.clearTop = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ScheduleMeetingWithWndParams.prototype.hasTop = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EditMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EditMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EditMeetingParams.displayName = 'proto.com.electron.sdk.proto.EditMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EditMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EditMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EditMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EditMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    meetingnumber: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EditMeetingParams}
 */
proto.com.electron.sdk.proto.EditMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EditMeetingParams;
  return proto.com.electron.sdk.proto.EditMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EditMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EditMeetingParams}
 */
proto.com.electron.sdk.proto.EditMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMeetingnumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EditMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EditMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EditMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EditMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 meetingNumber = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.EditMeetingParams.prototype.getMeetingnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.EditMeetingParams.prototype.setMeetingnumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EditMeetingParams.prototype.clearMeetingnumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EditMeetingParams.prototype.hasMeetingnumber = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EditMeetingWithWndParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EditMeetingWithWndParams.displayName = 'proto.com.electron.sdk.proto.EditMeetingWithWndParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EditMeetingWithWndParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EditMeetingWithWndParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    hselfwnd: jspb.Message.getField(msg, 1),
    hparent: jspb.Message.getField(msg, 2),
    left: jspb.Message.getField(msg, 3),
    top: jspb.Message.getField(msg, 4),
    meetingnumber: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EditMeetingWithWndParams}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EditMeetingWithWndParams;
  return proto.com.electron.sdk.proto.EditMeetingWithWndParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EditMeetingWithWndParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EditMeetingWithWndParams}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHselfwnd(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHparent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeft(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTop(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMeetingnumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EditMeetingWithWndParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EditMeetingWithWndParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string hSelfWnd = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.getHselfwnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.setHselfwnd = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.clearHselfwnd = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.hasHselfwnd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string hParent = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.getHparent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.setHparent = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.clearHparent = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.hasHparent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string left = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.getLeft = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.clearLeft = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string top = 4;
 * @return {string}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.getTop = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.setTop = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.clearTop = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.hasTop = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 meetingNumber = 5;
 * @return {number}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.getMeetingnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.setMeetingnumber = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.clearMeetingnumber = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EditMeetingWithWndParams.prototype.hasMeetingnumber = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DeleteMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DeleteMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DeleteMeetingParams.displayName = 'proto.com.electron.sdk.proto.DeleteMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DeleteMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DeleteMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DeleteMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DeleteMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    meetingnumber: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DeleteMeetingParams}
 */
proto.com.electron.sdk.proto.DeleteMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DeleteMeetingParams;
  return proto.com.electron.sdk.proto.DeleteMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DeleteMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DeleteMeetingParams}
 */
proto.com.electron.sdk.proto.DeleteMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMeetingnumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DeleteMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DeleteMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DeleteMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DeleteMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 meetingNumber = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.DeleteMeetingParams.prototype.getMeetingnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.DeleteMeetingParams.prototype.setMeetingnumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DeleteMeetingParams.prototype.clearMeetingnumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DeleteMeetingParams.prototype.hasMeetingnumber = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.displayName = 'proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    strpngid: jspb.Message.getField(msg, 1),
    strpngpath: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams}
 */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams;
  return proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams}
 */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrpngid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrpngpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string strPNGID = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.prototype.getStrpngid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.prototype.setStrpngid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.prototype.clearStrpngid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.prototype.hasStrpngid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string strPNGPath = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.prototype.getStrpngpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.prototype.setStrpngpath = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.prototype.clearStrpngpath = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.AddCustomizedPictureResourceParams.prototype.hasStrpngpath = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.AddCustomizedStringResourceParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.displayName = 'proto.com.electron.sdk.proto.AddCustomizedStringResourceParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.AddCustomizedStringResourceParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    customizedstringtype: jspb.Message.getField(msg, 1),
    strcustomizedstring: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.AddCustomizedStringResourceParams}
 */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.AddCustomizedStringResourceParams;
  return proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.AddCustomizedStringResourceParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.AddCustomizedStringResourceParams}
 */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCustomizedstringtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrcustomizedstring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.AddCustomizedStringResourceParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 customizedStringType = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.prototype.getCustomizedstringtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.prototype.setCustomizedstringtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.prototype.clearCustomizedstringtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.prototype.hasCustomizedstringtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string strCustomizedString = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.prototype.getStrcustomizedstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.prototype.setStrcustomizedstring = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.prototype.clearStrcustomizedstring = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.AddCustomizedStringResourceParams.prototype.hasStrcustomizedstring = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.AddCustomizedURLResourceParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.displayName = 'proto.com.electron.sdk.proto.AddCustomizedURLResourceParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.AddCustomizedURLResourceParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    customizedurltype: jspb.Message.getField(msg, 1),
    strcustomizedurl: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.AddCustomizedURLResourceParams}
 */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.AddCustomizedURLResourceParams;
  return proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.AddCustomizedURLResourceParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.AddCustomizedURLResourceParams}
 */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCustomizedurltype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrcustomizedurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.AddCustomizedURLResourceParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 customizedURLType = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.prototype.getCustomizedurltype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.prototype.setCustomizedurltype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.prototype.clearCustomizedurltype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.prototype.hasCustomizedurltype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string strCustomizedURL = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.prototype.getStrcustomizedurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.prototype.setStrcustomizedurl = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.prototype.clearStrcustomizedurl = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.AddCustomizedURLResourceParams.prototype.hasStrcustomizedurl = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.TryWithMeetingNumberParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.TryWithMeetingNumberParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.TryWithMeetingNumberParams.displayName = 'proto.com.electron.sdk.proto.TryWithMeetingNumberParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.TryWithMeetingNumberParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.TryWithMeetingNumberParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.TryWithMeetingNumberParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.TryWithMeetingNumberParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    meetingnumber: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.TryWithMeetingNumberParams}
 */
proto.com.electron.sdk.proto.TryWithMeetingNumberParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.TryWithMeetingNumberParams;
  return proto.com.electron.sdk.proto.TryWithMeetingNumberParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.TryWithMeetingNumberParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.TryWithMeetingNumberParams}
 */
proto.com.electron.sdk.proto.TryWithMeetingNumberParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMeetingnumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.TryWithMeetingNumberParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.TryWithMeetingNumberParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.TryWithMeetingNumberParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.TryWithMeetingNumberParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 meetingNumber = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.TryWithMeetingNumberParams.prototype.getMeetingnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.TryWithMeetingNumberParams.prototype.setMeetingnumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.TryWithMeetingNumberParams.prototype.clearMeetingnumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.TryWithMeetingNumberParams.prototype.hasMeetingnumber = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.TryWithPairingCodeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.TryWithPairingCodeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.TryWithPairingCodeParams.displayName = 'proto.com.electron.sdk.proto.TryWithPairingCodeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.TryWithPairingCodeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.TryWithPairingCodeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.TryWithPairingCodeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.TryWithPairingCodeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    paringcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.TryWithPairingCodeParams}
 */
proto.com.electron.sdk.proto.TryWithPairingCodeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.TryWithPairingCodeParams;
  return proto.com.electron.sdk.proto.TryWithPairingCodeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.TryWithPairingCodeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.TryWithPairingCodeParams}
 */
proto.com.electron.sdk.proto.TryWithPairingCodeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParingcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.TryWithPairingCodeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.TryWithPairingCodeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.TryWithPairingCodeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.TryWithPairingCodeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string paringCode = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.TryWithPairingCodeParams.prototype.getParingcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.TryWithPairingCodeParams.prototype.setParingcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.TryWithPairingCodeParams.prototype.clearParingcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.TryWithPairingCodeParams.prototype.hasParingcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.StartAnnotationParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.StartAnnotationParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.StartAnnotationParams.displayName = 'proto.com.electron.sdk.proto.StartAnnotationParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.StartAnnotationParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.StartAnnotationParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.StartAnnotationParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StartAnnotationParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewtype: jspb.Message.getField(msg, 1),
    left: jspb.Message.getField(msg, 2),
    top: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.StartAnnotationParams}
 */
proto.com.electron.sdk.proto.StartAnnotationParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.StartAnnotationParams;
  return proto.com.electron.sdk.proto.StartAnnotationParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.StartAnnotationParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.StartAnnotationParams}
 */
proto.com.electron.sdk.proto.StartAnnotationParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViewtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeft(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.StartAnnotationParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.StartAnnotationParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.StartAnnotationParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StartAnnotationParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 viewType = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.StartAnnotationParams.prototype.getViewtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.StartAnnotationParams.prototype.setViewtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.StartAnnotationParams.prototype.clearViewtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartAnnotationParams.prototype.hasViewtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string left = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartAnnotationParams.prototype.getLeft = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartAnnotationParams.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.StartAnnotationParams.prototype.clearLeft = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartAnnotationParams.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string top = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartAnnotationParams.prototype.getTop = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartAnnotationParams.prototype.setTop = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.StartAnnotationParams.prototype.clearTop = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartAnnotationParams.prototype.hasTop = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.StopAnnotationParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.StopAnnotationParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.StopAnnotationParams.displayName = 'proto.com.electron.sdk.proto.StopAnnotationParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.StopAnnotationParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.StopAnnotationParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.StopAnnotationParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StopAnnotationParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewtype: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.StopAnnotationParams}
 */
proto.com.electron.sdk.proto.StopAnnotationParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.StopAnnotationParams;
  return proto.com.electron.sdk.proto.StopAnnotationParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.StopAnnotationParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.StopAnnotationParams}
 */
proto.com.electron.sdk.proto.StopAnnotationParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViewtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.StopAnnotationParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.StopAnnotationParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.StopAnnotationParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StopAnnotationParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 viewType = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.StopAnnotationParams.prototype.getViewtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.StopAnnotationParams.prototype.setViewtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.StopAnnotationParams.prototype.clearViewtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StopAnnotationParams.prototype.hasViewtype = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetToolParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetToolParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetToolParams.displayName = 'proto.com.electron.sdk.proto.SetToolParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetToolParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetToolParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetToolParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetToolParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewtype: jspb.Message.getField(msg, 1),
    tooltype: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetToolParams}
 */
proto.com.electron.sdk.proto.SetToolParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetToolParams;
  return proto.com.electron.sdk.proto.SetToolParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetToolParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetToolParams}
 */
proto.com.electron.sdk.proto.SetToolParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViewtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTooltype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetToolParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetToolParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetToolParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetToolParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 viewType = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.SetToolParams.prototype.getViewtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SetToolParams.prototype.setViewtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetToolParams.prototype.clearViewtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetToolParams.prototype.hasViewtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 toolType = 2;
 * @return {number}
 */
proto.com.electron.sdk.proto.SetToolParams.prototype.getTooltype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SetToolParams.prototype.setTooltype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SetToolParams.prototype.clearTooltype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetToolParams.prototype.hasTooltype = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ClearAnnotationParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ClearAnnotationParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ClearAnnotationParams.displayName = 'proto.com.electron.sdk.proto.ClearAnnotationParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ClearAnnotationParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ClearAnnotationParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ClearAnnotationParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ClearAnnotationParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewtype: jspb.Message.getField(msg, 1),
    cleartype: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ClearAnnotationParams}
 */
proto.com.electron.sdk.proto.ClearAnnotationParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ClearAnnotationParams;
  return proto.com.electron.sdk.proto.ClearAnnotationParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ClearAnnotationParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ClearAnnotationParams}
 */
proto.com.electron.sdk.proto.ClearAnnotationParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViewtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCleartype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ClearAnnotationParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ClearAnnotationParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ClearAnnotationParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ClearAnnotationParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 viewType = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.ClearAnnotationParams.prototype.getViewtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.ClearAnnotationParams.prototype.setViewtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ClearAnnotationParams.prototype.clearViewtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ClearAnnotationParams.prototype.hasViewtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 clearType = 2;
 * @return {number}
 */
proto.com.electron.sdk.proto.ClearAnnotationParams.prototype.getCleartype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.ClearAnnotationParams.prototype.setCleartype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.ClearAnnotationParams.prototype.clearCleartype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ClearAnnotationParams.prototype.hasCleartype = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetColorParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetColorParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetColorParams.displayName = 'proto.com.electron.sdk.proto.SetColorParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetColorParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetColorParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetColorParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetColorParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewtype: jspb.Message.getField(msg, 1),
    color: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetColorParams}
 */
proto.com.electron.sdk.proto.SetColorParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetColorParams;
  return proto.com.electron.sdk.proto.SetColorParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetColorParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetColorParams}
 */
proto.com.electron.sdk.proto.SetColorParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViewtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetColorParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetColorParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetColorParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetColorParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 viewType = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.SetColorParams.prototype.getViewtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SetColorParams.prototype.setViewtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetColorParams.prototype.clearViewtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetColorParams.prototype.hasViewtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string color = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetColorParams.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetColorParams.prototype.setColor = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SetColorParams.prototype.clearColor = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetColorParams.prototype.hasColor = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetLineWidthParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetLineWidthParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetLineWidthParams.displayName = 'proto.com.electron.sdk.proto.SetLineWidthParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetLineWidthParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetLineWidthParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetLineWidthParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetLineWidthParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewtype: jspb.Message.getField(msg, 1),
    linewidth: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetLineWidthParams}
 */
proto.com.electron.sdk.proto.SetLineWidthParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetLineWidthParams;
  return proto.com.electron.sdk.proto.SetLineWidthParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetLineWidthParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetLineWidthParams}
 */
proto.com.electron.sdk.proto.SetLineWidthParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViewtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinewidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetLineWidthParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetLineWidthParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetLineWidthParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetLineWidthParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 viewType = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.SetLineWidthParams.prototype.getViewtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SetLineWidthParams.prototype.setViewtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetLineWidthParams.prototype.clearViewtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetLineWidthParams.prototype.hasViewtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string lineWidth = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetLineWidthParams.prototype.getLinewidth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetLineWidthParams.prototype.setLinewidth = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SetLineWidthParams.prototype.clearLinewidth = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetLineWidthParams.prototype.hasLinewidth = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.UndoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.UndoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.UndoParams.displayName = 'proto.com.electron.sdk.proto.UndoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.UndoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.UndoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.UndoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.UndoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewtype: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.UndoParams}
 */
proto.com.electron.sdk.proto.UndoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.UndoParams;
  return proto.com.electron.sdk.proto.UndoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.UndoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.UndoParams}
 */
proto.com.electron.sdk.proto.UndoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViewtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.UndoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.UndoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.UndoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.UndoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 viewType = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.UndoParams.prototype.getViewtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.UndoParams.prototype.setViewtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.UndoParams.prototype.clearViewtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.UndoParams.prototype.hasViewtype = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RedoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RedoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RedoParams.displayName = 'proto.com.electron.sdk.proto.RedoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RedoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RedoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RedoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewtype: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RedoParams}
 */
proto.com.electron.sdk.proto.RedoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RedoParams;
  return proto.com.electron.sdk.proto.RedoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RedoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RedoParams}
 */
proto.com.electron.sdk.proto.RedoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViewtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RedoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RedoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RedoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 viewType = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.RedoParams.prototype.getViewtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.RedoParams.prototype.setViewtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RedoParams.prototype.clearViewtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedoParams.prototype.hasViewtype = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.MuteAudioParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.MuteAudioParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.MuteAudioParams.displayName = 'proto.com.electron.sdk.proto.MuteAudioParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.MuteAudioParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.MuteAudioParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.MuteAudioParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.MuteAudioParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    allowunmutebyself: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.MuteAudioParams}
 */
proto.com.electron.sdk.proto.MuteAudioParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.MuteAudioParams;
  return proto.com.electron.sdk.proto.MuteAudioParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.MuteAudioParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.MuteAudioParams}
 */
proto.com.electron.sdk.proto.MuteAudioParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowunmutebyself(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.MuteAudioParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.MuteAudioParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.MuteAudioParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.MuteAudioParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 userID = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.MuteAudioParams.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.MuteAudioParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.MuteAudioParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.MuteAudioParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool allowUnmuteBySelf = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.MuteAudioParams.prototype.getAllowunmutebyself = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.MuteAudioParams.prototype.setAllowunmutebyself = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.MuteAudioParams.prototype.clearAllowunmutebyself = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.MuteAudioParams.prototype.hasAllowunmutebyself = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.UnmuteAudioParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.UnmuteAudioParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.UnmuteAudioParams.displayName = 'proto.com.electron.sdk.proto.UnmuteAudioParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.UnmuteAudioParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.UnmuteAudioParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.UnmuteAudioParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.UnmuteAudioParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.UnmuteAudioParams}
 */
proto.com.electron.sdk.proto.UnmuteAudioParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.UnmuteAudioParams;
  return proto.com.electron.sdk.proto.UnmuteAudioParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.UnmuteAudioParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.UnmuteAudioParams}
 */
proto.com.electron.sdk.proto.UnmuteAudioParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.UnmuteAudioParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.UnmuteAudioParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.UnmuteAudioParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.UnmuteAudioParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 userID = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.UnmuteAudioParams.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.UnmuteAudioParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.UnmuteAudioParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.UnmuteAudioParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.displayName = 'proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams}
 */
proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams;
  return proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams}
 */
proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.displayName = 'proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams}
 */
proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams;
  return proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams}
 */
proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableInviteButtonOnMeeitngUIParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetFloatVideoPosParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetFloatVideoPosParams.displayName = 'proto.com.electron.sdk.proto.SetFloatVideoPosParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetFloatVideoPosParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetFloatVideoPosParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    left: jspb.Message.getField(msg, 1),
    top: jspb.Message.getField(msg, 2),
    hselfwnd: jspb.Message.getField(msg, 3),
    hparent: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetFloatVideoPosParams}
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetFloatVideoPosParams;
  return proto.com.electron.sdk.proto.SetFloatVideoPosParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetFloatVideoPosParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetFloatVideoPosParams}
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeft(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTop(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHselfwnd(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHparent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetFloatVideoPosParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetFloatVideoPosParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string left = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.getLeft = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.clearLeft = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string top = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.getTop = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.setTop = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.clearTop = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.hasTop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string hSelfWnd = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.getHselfwnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.setHselfwnd = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.clearHselfwnd = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.hasHselfwnd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string hParent = 4;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.getHparent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.setHparent = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.clearHparent = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetFloatVideoPosParams.prototype.hasHparent = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.displayName = 'proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bshow: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams}
 */
proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams;
  return proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams}
 */
proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bShow = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.displayName = 'proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bshow: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams}
 */
proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams;
  return proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams}
 */
proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bShow = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetSharingToolBarVisibilityParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.displayName = 'proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams}
 */
proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams;
  return proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams}
 */
proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMonitorid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string monitorID = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.prototype.getMonitorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.prototype.setMonitorid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.prototype.clearMonitorid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetDirectShareMonitorIDParams.prototype.hasMonitorid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetMeetingUIPosParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetMeetingUIPosParams.displayName = 'proto.com.electron.sdk.proto.SetMeetingUIPosParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetMeetingUIPosParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetMeetingUIPosParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    left: jspb.Message.getField(msg, 1),
    top: jspb.Message.getField(msg, 2),
    hselfwnd: jspb.Message.getField(msg, 3),
    hparent: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetMeetingUIPosParams}
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetMeetingUIPosParams;
  return proto.com.electron.sdk.proto.SetMeetingUIPosParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetMeetingUIPosParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetMeetingUIPosParams}
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeft(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTop(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHselfwnd(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHparent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetMeetingUIPosParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetMeetingUIPosParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string left = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.getLeft = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.clearLeft = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string top = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.getTop = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.setTop = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.clearTop = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.hasTop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string hSelfWnd = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.getHselfwnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.setHselfwnd = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.clearHselfwnd = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.hasHselfwnd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string hParent = 4;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.getHparent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.setHparent = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.clearHparent = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetMeetingUIPosParams.prototype.hasHparent = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.displayName = 'proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams}
 */
proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams;
  return proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams}
 */
proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisableWaitingForHostDialogParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.displayName = 'proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams}
 */
proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams;
  return proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams}
 */
proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.displayName = 'proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams}
 */
proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams;
  return proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams}
 */
proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.displayName = 'proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams}
 */
proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams;
  return proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams}
 */
proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.displayName = 'proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bshow: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams}
 */
proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams;
  return proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams}
 */
proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bShow = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetFloatVideoWndVisibilityParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.displayName = 'proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getField(msg, 1),
    username: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams}
 */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams;
  return proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams}
 */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.prototype.clearEmail = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string userName = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.prototype.clearUsername = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.displayName = 'proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams;
  return proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.displayName = 'proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams;
  return proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ConfigDSCPParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ConfigDSCPParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ConfigDSCPParams.displayName = 'proto.com.electron.sdk.proto.ConfigDSCPParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ConfigDSCPParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ConfigDSCPParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ConfigDSCPParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    dscpaudio: jspb.Message.getField(msg, 1),
    dscpvideo: jspb.Message.getField(msg, 2),
    breset: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ConfigDSCPParams}
 */
proto.com.electron.sdk.proto.ConfigDSCPParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ConfigDSCPParams;
  return proto.com.electron.sdk.proto.ConfigDSCPParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ConfigDSCPParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ConfigDSCPParams}
 */
proto.com.electron.sdk.proto.ConfigDSCPParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDscpaudio(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDscpvideo(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBreset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ConfigDSCPParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ConfigDSCPParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ConfigDSCPParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 dscpAudio = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.getDscpaudio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.setDscpaudio = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.clearDscpaudio = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.hasDscpaudio = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 dscpVideo = 2;
 * @return {number}
 */
proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.getDscpvideo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.setDscpvideo = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.clearDscpvideo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.hasDscpvideo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool bReset = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.getBreset = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.setBreset = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.clearBreset = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ConfigDSCPParams.prototype.hasBreset = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.displayName = 'proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams}
 */
proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams;
  return proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams}
 */
proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableShareIOSDeviceParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableShareIOSDeviceParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.displayName = 'proto.com.electron.sdk.proto.EnableShareIOSDeviceParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableShareIOSDeviceParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableShareIOSDeviceParams}
 */
proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableShareIOSDeviceParams;
  return proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableShareIOSDeviceParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableShareIOSDeviceParams}
 */
proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableShareIOSDeviceParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableShareIOSDeviceParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableShareWhiteBoardParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableShareWhiteBoardParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.displayName = 'proto.com.electron.sdk.proto.EnableShareWhiteBoardParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableShareWhiteBoardParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableShareWhiteBoardParams}
 */
proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableShareWhiteBoardParams;
  return proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableShareWhiteBoardParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableShareWhiteBoardParams}
 */
proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableShareWhiteBoardParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableShareWhiteBoardParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.displayName = 'proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams}
 */
proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams;
  return proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams}
 */
proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ForceDisableMultiShareParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ForceDisableMultiShareParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ForceDisableMultiShareParams.displayName = 'proto.com.electron.sdk.proto.ForceDisableMultiShareParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ForceDisableMultiShareParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ForceDisableMultiShareParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ForceDisableMultiShareParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ForceDisableMultiShareParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ForceDisableMultiShareParams}
 */
proto.com.electron.sdk.proto.ForceDisableMultiShareParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ForceDisableMultiShareParams;
  return proto.com.electron.sdk.proto.ForceDisableMultiShareParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ForceDisableMultiShareParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ForceDisableMultiShareParams}
 */
proto.com.electron.sdk.proto.ForceDisableMultiShareParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ForceDisableMultiShareParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ForceDisableMultiShareParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ForceDisableMultiShareParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ForceDisableMultiShareParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.ForceDisableMultiShareParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.ForceDisableMultiShareParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ForceDisableMultiShareParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ForceDisableMultiShareParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.displayName = 'proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams}
 */
proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams;
  return proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams}
 */
proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.displayName = 'proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    nduration: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams}
 */
proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams;
  return proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams}
 */
proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNduration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 nDuration = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.prototype.getNduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.prototype.setNduration = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.prototype.clearNduration = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams.prototype.hasNduration = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.displayName = 'proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams}
 */
proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams;
  return proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams}
 */
proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableApproveRemoteControlDlgParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.displayName = 'proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams}
 */
proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams;
  return proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams}
 */
proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.displayName = 'proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams}
 */
proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams;
  return proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams}
 */
proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.displayName = 'proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams;
  return proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.displayName = 'proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams;
  return proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.displayName = 'proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams;
  return proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.displayName = 'proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bredirect: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams;
  return proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBredirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bRedirect = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.prototype.getBredirect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.prototype.setBredirect = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.prototype.clearBredirect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedirectClickShareBTNEventParams.prototype.hasBredirect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.displayName = 'proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bredirect: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams;
  return proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBredirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bRedirect = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.prototype.getBredirect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.prototype.setBredirect = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.prototype.clearBredirect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams.prototype.hasBredirect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.displayName = 'proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bredirect: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams}
 */
proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams;
  return proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams}
 */
proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBredirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bRedirect = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.prototype.getBredirect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.prototype.setBredirect = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.prototype.clearBredirect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams.prototype.hasBredirect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.displayName = 'proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bredirect: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams;
  return proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBredirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bRedirect = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.prototype.getBredirect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.prototype.setBredirect = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.prototype.clearBredirect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams.prototype.hasBredirect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.displayName = 'proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bredirect: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams;
  return proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBredirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bRedirect = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.prototype.getBredirect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.prototype.setBredirect = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.prototype.clearBredirect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams.prototype.hasBredirect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.displayName = 'proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bredirect: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams;
  return proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBredirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bRedirect = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.prototype.getBredirect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.prototype.setBredirect = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.prototype.clearBredirect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedirectClickCCBTNEventParams.prototype.hasBredirect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.displayName = 'proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bredirect: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams;
  return proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBredirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bRedirect = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.prototype.getBredirect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.prototype.setBredirect = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.prototype.clearBredirect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedirectClickAudioBTNEventParams.prototype.hasBredirect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.displayName = 'proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bredirect: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams;
  return proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams}
 */
proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBredirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bRedirect = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.prototype.getBredirect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.prototype.setBredirect = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.prototype.clearBredirect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams.prototype.hasBredirect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.displayName = 'proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bredirectbadnetwork: jspb.Message.getField(msg, 1),
    bredirectwarnhighcpu: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams}
 */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams;
  return proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams}
 */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBredirectbadnetwork(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBredirectwarnhighcpu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool bRedirectBadNetwork = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.prototype.getBredirectbadnetwork = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.prototype.setBredirectbadnetwork = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.prototype.clearBredirectbadnetwork = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.prototype.hasBredirectbadnetwork = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bRedirectWarnHighCPU = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.prototype.getBredirectwarnhighcpu = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.prototype.setBredirectwarnhighcpu = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.prototype.clearBredirectwarnhighcpu = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedirectMeetingWarningMsgParams.prototype.hasBredirectwarnhighcpu = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableToolTipsShowParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableToolTipsShowParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableToolTipsShowParams.displayName = 'proto.com.electron.sdk.proto.EnableToolTipsShowParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableToolTipsShowParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableToolTipsShowParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableToolTipsShowParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableToolTipsShowParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableToolTipsShowParams}
 */
proto.com.electron.sdk.proto.EnableToolTipsShowParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableToolTipsShowParams;
  return proto.com.electron.sdk.proto.EnableToolTipsShowParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableToolTipsShowParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableToolTipsShowParams}
 */
proto.com.electron.sdk.proto.EnableToolTipsShowParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableToolTipsShowParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableToolTipsShowParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableToolTipsShowParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableToolTipsShowParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableToolTipsShowParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableToolTipsShowParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableToolTipsShowParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableToolTipsShowParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.displayName = 'proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams}
 */
proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams;
  return proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams}
 */
proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAirplayInstructionWindowParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableClaimHostFeatureParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableClaimHostFeatureParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.displayName = 'proto.com.electron.sdk.proto.EnableClaimHostFeatureParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableClaimHostFeatureParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableClaimHostFeatureParams}
 */
proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableClaimHostFeatureParams;
  return proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableClaimHostFeatureParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableClaimHostFeatureParams}
 */
proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableClaimHostFeatureParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableClaimHostFeatureParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.displayName = 'proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams}
 */
proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams;
  return proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams}
 */
proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.displayName = 'proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    balwaysshow: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams}
 */
proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams;
  return proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams}
 */
proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBalwaysshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bAlwaysShow = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.prototype.getBalwaysshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.prototype.setBalwaysshow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.prototype.clearBalwaysshow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams.prototype.hasBalwaysshow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.displayName = 'proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams}
 */
proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams;
  return proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams}
 */
proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.displayName = 'proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bshow: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams}
 */
proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams;
  return proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams}
 */
proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bShow = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetShowCallInTabParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetShowCallInTabParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetShowCallInTabParams.displayName = 'proto.com.electron.sdk.proto.SetShowCallInTabParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetShowCallInTabParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetShowCallInTabParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetShowCallInTabParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetShowCallInTabParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bshow: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetShowCallInTabParams}
 */
proto.com.electron.sdk.proto.SetShowCallInTabParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetShowCallInTabParams;
  return proto.com.electron.sdk.proto.SetShowCallInTabParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetShowCallInTabParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetShowCallInTabParams}
 */
proto.com.electron.sdk.proto.SetShowCallInTabParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetShowCallInTabParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetShowCallInTabParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetShowCallInTabParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetShowCallInTabParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bShow = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.SetShowCallInTabParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.SetShowCallInTabParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetShowCallInTabParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetShowCallInTabParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetShowCallMeTabParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetShowCallMeTabParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetShowCallMeTabParams.displayName = 'proto.com.electron.sdk.proto.SetShowCallMeTabParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetShowCallMeTabParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetShowCallMeTabParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetShowCallMeTabParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetShowCallMeTabParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bshow: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetShowCallMeTabParams}
 */
proto.com.electron.sdk.proto.SetShowCallMeTabParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetShowCallMeTabParams;
  return proto.com.electron.sdk.proto.SetShowCallMeTabParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetShowCallMeTabParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetShowCallMeTabParams}
 */
proto.com.electron.sdk.proto.SetShowCallMeTabParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetShowCallMeTabParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetShowCallMeTabParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetShowCallMeTabParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetShowCallMeTabParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bShow = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.SetShowCallMeTabParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.SetShowCallMeTabParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetShowCallMeTabParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetShowCallMeTabParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.displayName = 'proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams}
 */
proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams;
  return proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams}
 */
proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.displayName = 'proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams}
 */
proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams;
  return proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams}
 */
proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableGrabShareWithoutReminderParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.displayName = 'proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams}
 */
proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams;
  return proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams}
 */
proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.displayName = 'proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams}
 */
proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams;
  return proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams}
 */
proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.displayName = 'proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bhide: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams;
  return proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bHide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.prototype.getBhide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.prototype.setBhide = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.prototype.clearBhide = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HideChatItemOnMeetingUIParams.prototype.hasBhide = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.displayName = 'proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bhide: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams;
  return proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bHide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.prototype.getBhide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.prototype.setBhide = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.prototype.clearBhide = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HideRecordItemOnMeetingUIParams.prototype.hasBhide = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.displayName = 'proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bhide: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams}
 */
proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams;
  return proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams}
 */
proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bHide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.prototype.getBhide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.prototype.setBhide = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.prototype.clearBhide = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams.prototype.hasBhide = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.displayName = 'proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    tabpage: jspb.Message.getField(msg, 1),
    bshow: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams}
 */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams;
  return proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams}
 */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTabpage(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 tabPage = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.prototype.getTabpage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.prototype.setTabpage = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.prototype.clearTabpage = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.prototype.hasTabpage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bShow = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetShowInviteDlgTabPageParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetShowH323SubTabPageParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.displayName = 'proto.com.electron.sdk.proto.SetShowH323SubTabPageParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetShowH323SubTabPageParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    tabpage: jspb.Message.getField(msg, 1),
    bshow: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetShowH323SubTabPageParams}
 */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetShowH323SubTabPageParams;
  return proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetShowH323SubTabPageParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetShowH323SubTabPageParams}
 */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTabpage(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetShowH323SubTabPageParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 tabPage = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.prototype.getTabpage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.prototype.setTabpage = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.prototype.clearTabpage = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.prototype.hasTabpage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bShow = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetShowH323SubTabPageParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.displayName = 'proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bhide: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams}
 */
proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams;
  return proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams}
 */
proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bHide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.prototype.getBhide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.prototype.setBhide = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.prototype.clearBhide = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HideUpgradeWarningMsgForFreeUserWhenScheduleParams.prototype.hasBhide = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HideSwitchCameraButtonParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HideSwitchCameraButtonParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.displayName = 'proto.com.electron.sdk.proto.HideSwitchCameraButtonParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HideSwitchCameraButtonParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bhide: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HideSwitchCameraButtonParams}
 */
proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HideSwitchCameraButtonParams;
  return proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HideSwitchCameraButtonParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HideSwitchCameraButtonParams}
 */
proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HideSwitchCameraButtonParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bHide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.prototype.getBhide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.prototype.setBhide = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.prototype.clearBhide = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HideSwitchCameraButtonParams.prototype.hasBhide = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.displayName = 'proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bhide: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams}
 */
proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams;
  return proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams}
 */
proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bHide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.prototype.getBhide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.prototype.setBhide = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.prototype.clearBhide = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams.prototype.hasBhide = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.displayName = 'proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bhide: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams}
 */
proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams;
  return proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams}
 */
proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bHide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.prototype.getBhide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.prototype.setBhide = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.prototype.clearBhide = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams.prototype.hasBhide = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.displayName = 'proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bhide: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams}
 */
proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams;
  return proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams}
 */
proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bHide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.prototype.getBhide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.prototype.setBhide = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.prototype.clearBhide = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams.prototype.hasBhide = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.displayName = 'proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bhide: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams;
  return proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bHide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.prototype.getBhide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.prototype.setBhide = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.prototype.clearBhide = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams.prototype.hasBhide = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HideQAOnMeetingUIParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HideQAOnMeetingUIParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.displayName = 'proto.com.electron.sdk.proto.HideQAOnMeetingUIParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HideQAOnMeetingUIParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bhide: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HideQAOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HideQAOnMeetingUIParams;
  return proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HideQAOnMeetingUIParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HideQAOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HideQAOnMeetingUIParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bHide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.prototype.getBhide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.prototype.setBhide = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.prototype.clearBhide = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HideQAOnMeetingUIParams.prototype.hasBhide = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HidePollOnMeetingUIParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HidePollOnMeetingUIParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.displayName = 'proto.com.electron.sdk.proto.HidePollOnMeetingUIParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HidePollOnMeetingUIParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bhide: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HidePollOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HidePollOnMeetingUIParams;
  return proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HidePollOnMeetingUIParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HidePollOnMeetingUIParams}
 */
proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HidePollOnMeetingUIParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bHide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.prototype.getBhide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.prototype.setBhide = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.prototype.clearBhide = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HidePollOnMeetingUIParams.prototype.hasBhide = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.displayName = 'proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams}
 */
proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams;
  return proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams}
 */
proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.displayName = 'proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams}
 */
proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams;
  return proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams}
 */
proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.displayName = 'proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bredirect: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams}
 */
proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams;
  return proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams}
 */
proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBredirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bRedirect = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.prototype.getBredirect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.prototype.setBredirect = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.prototype.clearBredirect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedirectWebinarNeedRegisterParams.prototype.hasBredirect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.displayName = 'proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bredirect: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams}
 */
proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams;
  return proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams}
 */
proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBredirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bRedirect = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.prototype.getBredirect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.prototype.setBredirect = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.prototype.clearBredirect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RedirectEndOtherMeetingParams.prototype.hasBredirect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.displayName = 'proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams}
 */
proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams;
  return proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams}
 */
proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.displayName = 'proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams}
 */
proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams;
  return proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams}
 */
proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.displayName = 'proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams}
 */
proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams;
  return proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams}
 */
proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.displayName = 'proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams}
 */
proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams;
  return proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams}
 */
proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisableShowJoinMeetingWndParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.displayName = 'proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams}
 */
proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams;
  return proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams}
 */
proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisableConfidentialWatermarkParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.displayName = 'proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams}
 */
proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams;
  return proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams}
 */
proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisableRemoteCtrlCopyPasteFeatureParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.displayName = 'proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams}
 */
proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams;
  return proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams}
 */
proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.displayName = 'proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bshow: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams}
 */
proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams;
  return proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams}
 */
proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBshow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bShow = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.prototype.getBshow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.prototype.setBshow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.prototype.clearBshow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams.prototype.hasBshow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.displayName = 'proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    psw: jspb.Message.getField(msg, 1),
    screenname: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams}
 */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams;
  return proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams}
 */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPsw(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScreenname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string psw = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.prototype.getPsw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.prototype.setPsw = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.prototype.clearPsw = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.prototype.hasPsw = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string screenName = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.prototype.getScreenname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.prototype.setScreenname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.prototype.clearScreenname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams.prototype.hasScreenname = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.displayName = 'proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    meetingid: jspb.Message.getField(msg, 1),
    screenname: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams}
 */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams;
  return proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams}
 */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeetingid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScreenname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string meetingID = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.prototype.getMeetingid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.prototype.setMeetingid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.prototype.clearMeetingid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.prototype.hasMeetingid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string screenName = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.prototype.getScreenname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.prototype.setScreenname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.prototype.clearScreenname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InputMeetingIDAndScreenNameParams.prototype.hasScreenname = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.InputMeetingScreenNameParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.InputMeetingScreenNameParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.InputMeetingScreenNameParams.displayName = 'proto.com.electron.sdk.proto.InputMeetingScreenNameParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.InputMeetingScreenNameParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.InputMeetingScreenNameParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.InputMeetingScreenNameParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.InputMeetingScreenNameParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    screenname: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.InputMeetingScreenNameParams}
 */
proto.com.electron.sdk.proto.InputMeetingScreenNameParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.InputMeetingScreenNameParams;
  return proto.com.electron.sdk.proto.InputMeetingScreenNameParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.InputMeetingScreenNameParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.InputMeetingScreenNameParams}
 */
proto.com.electron.sdk.proto.InputMeetingScreenNameParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScreenname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.InputMeetingScreenNameParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.InputMeetingScreenNameParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.InputMeetingScreenNameParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.InputMeetingScreenNameParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string screenName = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.InputMeetingScreenNameParams.prototype.getScreenname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.InputMeetingScreenNameParams.prototype.setScreenname = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.InputMeetingScreenNameParams.prototype.clearScreenname = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InputMeetingScreenNameParams.prototype.hasScreenname = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.displayName = 'proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getField(msg, 1),
    screenname: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams}
 */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams;
  return proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams}
 */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScreenname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.prototype.clearEmail = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string screenName = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.prototype.getScreenname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.prototype.setScreenname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.prototype.clearScreenname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams.prototype.hasScreenname = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.CallOutH323Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.CallOutH323Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.CallOutH323Params.displayName = 'proto.com.electron.sdk.proto.CallOutH323Params';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.CallOutH323Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.CallOutH323Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.CallOutH323Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicename: jspb.Message.getField(msg, 1),
    deviceip: jspb.Message.getField(msg, 2),
    devicee164num: jspb.Message.getField(msg, 3),
    h323devicetype: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.CallOutH323Params}
 */
proto.com.electron.sdk.proto.CallOutH323Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.CallOutH323Params;
  return proto.com.electron.sdk.proto.CallOutH323Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.CallOutH323Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.CallOutH323Params}
 */
proto.com.electron.sdk.proto.CallOutH323Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceip(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicee164num(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setH323devicetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.CallOutH323Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.CallOutH323Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.CallOutH323Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string deviceName = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.getDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.setDevicename = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.CallOutH323Params.prototype.clearDevicename = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.hasDevicename = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string deviceIP = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.getDeviceip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.setDeviceip = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.CallOutH323Params.prototype.clearDeviceip = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.hasDeviceip = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string deviceE164num = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.getDevicee164num = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.setDevicee164num = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.CallOutH323Params.prototype.clearDevicee164num = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.hasDevicee164num = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 h323DeviceType = 4;
 * @return {number}
 */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.getH323devicetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.setH323devicetype = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.com.electron.sdk.proto.CallOutH323Params.prototype.clearH323devicetype = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.CallOutH323Params.prototype.hasH323devicetype = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.GetUserInfoByUserIDParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.GetUserInfoByUserIDParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.displayName = 'proto.com.electron.sdk.proto.GetUserInfoByUserIDParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.GetUserInfoByUserIDParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.GetUserInfoByUserIDParams}
 */
proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.GetUserInfoByUserIDParams;
  return proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.GetUserInfoByUserIDParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.GetUserInfoByUserIDParams}
 */
proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.GetUserInfoByUserIDParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 userID = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.GetUserInfoByUserIDParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.StartRecordingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.StartRecordingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.StartRecordingParams.displayName = 'proto.com.electron.sdk.proto.StartRecordingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.StartRecordingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.StartRecordingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.StartRecordingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StartRecordingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    recpath: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.StartRecordingParams}
 */
proto.com.electron.sdk.proto.StartRecordingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.StartRecordingParams;
  return proto.com.electron.sdk.proto.StartRecordingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.StartRecordingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.StartRecordingParams}
 */
proto.com.electron.sdk.proto.StartRecordingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.StartRecordingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.StartRecordingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.StartRecordingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StartRecordingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string recPath = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartRecordingParams.prototype.getRecpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartRecordingParams.prototype.setRecpath = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.StartRecordingParams.prototype.clearRecpath = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartRecordingParams.prototype.hasRecpath = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.CanStartRecordingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.CanStartRecordingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.CanStartRecordingParams.displayName = 'proto.com.electron.sdk.proto.CanStartRecordingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.CanStartRecordingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.CanStartRecordingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.CanStartRecordingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.CanStartRecordingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bcloudrecording: jspb.Message.getField(msg, 1),
    userid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.CanStartRecordingParams}
 */
proto.com.electron.sdk.proto.CanStartRecordingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.CanStartRecordingParams;
  return proto.com.electron.sdk.proto.CanStartRecordingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.CanStartRecordingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.CanStartRecordingParams}
 */
proto.com.electron.sdk.proto.CanStartRecordingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBcloudrecording(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.CanStartRecordingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.CanStartRecordingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.CanStartRecordingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.CanStartRecordingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bool bCloudRecording = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.CanStartRecordingParams.prototype.getBcloudrecording = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.CanStartRecordingParams.prototype.setBcloudrecording = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.CanStartRecordingParams.prototype.clearBcloudrecording = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.CanStartRecordingParams.prototype.hasBcloudrecording = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 userID = 2;
 * @return {number}
 */
proto.com.electron.sdk.proto.CanStartRecordingParams.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.CanStartRecordingParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.CanStartRecordingParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.CanStartRecordingParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.IsSupportLocalRecordingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.IsSupportLocalRecordingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.displayName = 'proto.com.electron.sdk.proto.IsSupportLocalRecordingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.IsSupportLocalRecordingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.IsSupportLocalRecordingParams}
 */
proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.IsSupportLocalRecordingParams;
  return proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.IsSupportLocalRecordingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.IsSupportLocalRecordingParams}
 */
proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.IsSupportLocalRecordingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 userID = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.IsSupportLocalRecordingParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.AllowLocalRecordingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.AllowLocalRecordingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.AllowLocalRecordingParams.displayName = 'proto.com.electron.sdk.proto.AllowLocalRecordingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.AllowLocalRecordingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.AllowLocalRecordingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.AllowLocalRecordingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AllowLocalRecordingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.AllowLocalRecordingParams}
 */
proto.com.electron.sdk.proto.AllowLocalRecordingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.AllowLocalRecordingParams;
  return proto.com.electron.sdk.proto.AllowLocalRecordingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.AllowLocalRecordingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.AllowLocalRecordingParams}
 */
proto.com.electron.sdk.proto.AllowLocalRecordingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.AllowLocalRecordingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.AllowLocalRecordingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.AllowLocalRecordingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.AllowLocalRecordingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 userID = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.AllowLocalRecordingParams.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.AllowLocalRecordingParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.AllowLocalRecordingParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.AllowLocalRecordingParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisAllowLocalRecordingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisAllowLocalRecordingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.displayName = 'proto.com.electron.sdk.proto.DisAllowLocalRecordingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisAllowLocalRecordingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisAllowLocalRecordingParams}
 */
proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisAllowLocalRecordingParams;
  return proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisAllowLocalRecordingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisAllowLocalRecordingParams}
 */
proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisAllowLocalRecordingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 userID = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisAllowLocalRecordingParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.StartAppShareParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.StartAppShareParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.StartAppShareParams.displayName = 'proto.com.electron.sdk.proto.StartAppShareParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.StartAppShareParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.StartAppShareParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.StartAppShareParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StartAppShareParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    hshareapp: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.StartAppShareParams}
 */
proto.com.electron.sdk.proto.StartAppShareParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.StartAppShareParams;
  return proto.com.electron.sdk.proto.StartAppShareParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.StartAppShareParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.StartAppShareParams}
 */
proto.com.electron.sdk.proto.StartAppShareParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHshareapp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.StartAppShareParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.StartAppShareParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.StartAppShareParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StartAppShareParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hShareApp = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartAppShareParams.prototype.getHshareapp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartAppShareParams.prototype.setHshareapp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.StartAppShareParams.prototype.clearHshareapp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartAppShareParams.prototype.hasHshareapp = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.StartMonitorShareParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.StartMonitorShareParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.StartMonitorShareParams.displayName = 'proto.com.electron.sdk.proto.StartMonitorShareParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.StartMonitorShareParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.StartMonitorShareParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.StartMonitorShareParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StartMonitorShareParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.StartMonitorShareParams}
 */
proto.com.electron.sdk.proto.StartMonitorShareParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.StartMonitorShareParams;
  return proto.com.electron.sdk.proto.StartMonitorShareParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.StartMonitorShareParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.StartMonitorShareParams}
 */
proto.com.electron.sdk.proto.StartMonitorShareParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMonitorid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.StartMonitorShareParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.StartMonitorShareParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.StartMonitorShareParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.StartMonitorShareParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string monitorID = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.StartMonitorShareParams.prototype.getMonitorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.StartMonitorShareParams.prototype.setMonitorid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.StartMonitorShareParams.prototype.clearMonitorid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.StartMonitorShareParams.prototype.hasMonitorid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.MuteVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.MuteVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.MuteVideoParams.displayName = 'proto.com.electron.sdk.proto.MuteVideoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.MuteVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.MuteVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.MuteVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.MuteVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.MuteVideoParams}
 */
proto.com.electron.sdk.proto.MuteVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.MuteVideoParams;
  return proto.com.electron.sdk.proto.MuteVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.MuteVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.MuteVideoParams}
 */
proto.com.electron.sdk.proto.MuteVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.MuteVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.MuteVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.MuteVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.MuteVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 userID = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.MuteVideoParams.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.MuteVideoParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.MuteVideoParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.MuteVideoParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.UnMuteVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.UnMuteVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.UnMuteVideoParams.displayName = 'proto.com.electron.sdk.proto.UnMuteVideoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.UnMuteVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.UnMuteVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.UnMuteVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.UnMuteVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.UnMuteVideoParams}
 */
proto.com.electron.sdk.proto.UnMuteVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.UnMuteVideoParams;
  return proto.com.electron.sdk.proto.UnMuteVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.UnMuteVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.UnMuteVideoParams}
 */
proto.com.electron.sdk.proto.UnMuteVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.UnMuteVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.UnMuteVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.UnMuteVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.UnMuteVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 userID = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.UnMuteVideoParams.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.UnMuteVideoParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.UnMuteVideoParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.UnMuteVideoParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.PinVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.PinVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.PinVideoParams.displayName = 'proto.com.electron.sdk.proto.PinVideoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.PinVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.PinVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.PinVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.PinVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bpin: jspb.Message.getField(msg, 1),
    bfirstview: jspb.Message.getField(msg, 2),
    userid: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.PinVideoParams}
 */
proto.com.electron.sdk.proto.PinVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.PinVideoParams;
  return proto.com.electron.sdk.proto.PinVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.PinVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.PinVideoParams}
 */
proto.com.electron.sdk.proto.PinVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBpin(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBfirstview(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.PinVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.PinVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.PinVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.PinVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bool bPin = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.PinVideoParams.prototype.getBpin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.PinVideoParams.prototype.setBpin = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.PinVideoParams.prototype.clearBpin = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.PinVideoParams.prototype.hasBpin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bFirstView = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.PinVideoParams.prototype.getBfirstview = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.PinVideoParams.prototype.setBfirstview = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.PinVideoParams.prototype.clearBfirstview = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.PinVideoParams.prototype.hasBfirstview = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 userID = 3;
 * @return {number}
 */
proto.com.electron.sdk.proto.PinVideoParams.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.PinVideoParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.PinVideoParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.PinVideoParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SpotlightVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SpotlightVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SpotlightVideoParams.displayName = 'proto.com.electron.sdk.proto.SpotlightVideoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SpotlightVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SpotlightVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SpotlightVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SpotlightVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bspotlight: jspb.Message.getField(msg, 1),
    userid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SpotlightVideoParams}
 */
proto.com.electron.sdk.proto.SpotlightVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SpotlightVideoParams;
  return proto.com.electron.sdk.proto.SpotlightVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SpotlightVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SpotlightVideoParams}
 */
proto.com.electron.sdk.proto.SpotlightVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBspotlight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SpotlightVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SpotlightVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SpotlightVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SpotlightVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bool bSpotlight = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.SpotlightVideoParams.prototype.getBspotlight = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.SpotlightVideoParams.prototype.setBspotlight = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SpotlightVideoParams.prototype.clearBspotlight = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SpotlightVideoParams.prototype.hasBspotlight = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 userID = 2;
 * @return {number}
 */
proto.com.electron.sdk.proto.SpotlightVideoParams.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SpotlightVideoParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SpotlightVideoParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SpotlightVideoParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.displayName = 'proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bhide: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams}
 */
proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams;
  return proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams}
 */
proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bHide = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.prototype.getBhide = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.prototype.setBhide = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.prototype.clearBhide = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams.prototype.hasBhide = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.CreateRendererParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.CreateRendererParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.CreateRendererParams.displayName = 'proto.com.electron.sdk.proto.CreateRendererParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.CreateRendererParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.CreateRendererParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.CreateRendererParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.CreateRendererParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    recvhandle: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.CreateRendererParams}
 */
proto.com.electron.sdk.proto.CreateRendererParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.CreateRendererParams;
  return proto.com.electron.sdk.proto.CreateRendererParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.CreateRendererParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.CreateRendererParams}
 */
proto.com.electron.sdk.proto.CreateRendererParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRecvhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.CreateRendererParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.CreateRendererParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.CreateRendererParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.CreateRendererParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 recvHandle = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.CreateRendererParams.prototype.getRecvhandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.CreateRendererParams.prototype.setRecvhandle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.CreateRendererParams.prototype.clearRecvhandle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.CreateRendererParams.prototype.hasRecvhandle = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DestroyRendererParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DestroyRendererParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DestroyRendererParams.displayName = 'proto.com.electron.sdk.proto.DestroyRendererParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DestroyRendererParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DestroyRendererParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DestroyRendererParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DestroyRendererParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    recvhandle: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DestroyRendererParams}
 */
proto.com.electron.sdk.proto.DestroyRendererParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DestroyRendererParams;
  return proto.com.electron.sdk.proto.DestroyRendererParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DestroyRendererParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DestroyRendererParams}
 */
proto.com.electron.sdk.proto.DestroyRendererParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRecvhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DestroyRendererParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DestroyRendererParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DestroyRendererParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DestroyRendererParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 recvHandle = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.DestroyRendererParams.prototype.getRecvhandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.DestroyRendererParams.prototype.setRecvhandle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DestroyRendererParams.prototype.clearRecvhandle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DestroyRendererParams.prototype.hasRecvhandle = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SubscribeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SubscribeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SubscribeParams.displayName = 'proto.com.electron.sdk.proto.SubscribeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SubscribeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SubscribeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SubscribeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SubscribeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    rawdatatype: jspb.Message.getField(msg, 2),
    recvhandle: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SubscribeParams}
 */
proto.com.electron.sdk.proto.SubscribeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SubscribeParams;
  return proto.com.electron.sdk.proto.SubscribeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SubscribeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SubscribeParams}
 */
proto.com.electron.sdk.proto.SubscribeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRawdatatype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRecvhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SubscribeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SubscribeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SubscribeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SubscribeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint32 userID = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.SubscribeParams.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SubscribeParams.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SubscribeParams.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SubscribeParams.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 rawDataType = 2;
 * @return {number}
 */
proto.com.electron.sdk.proto.SubscribeParams.prototype.getRawdatatype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SubscribeParams.prototype.setRawdatatype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SubscribeParams.prototype.clearRawdatatype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SubscribeParams.prototype.hasRawdatatype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 recvHandle = 3;
 * @return {number}
 */
proto.com.electron.sdk.proto.SubscribeParams.prototype.getRecvhandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SubscribeParams.prototype.setRecvhandle = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.SubscribeParams.prototype.clearRecvhandle = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SubscribeParams.prototype.hasRecvhandle = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.UnSubscribeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.UnSubscribeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.UnSubscribeParams.displayName = 'proto.com.electron.sdk.proto.UnSubscribeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.UnSubscribeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.UnSubscribeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.UnSubscribeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.UnSubscribeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    recvhandle: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.UnSubscribeParams}
 */
proto.com.electron.sdk.proto.UnSubscribeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.UnSubscribeParams;
  return proto.com.electron.sdk.proto.UnSubscribeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.UnSubscribeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.UnSubscribeParams}
 */
proto.com.electron.sdk.proto.UnSubscribeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRecvhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.UnSubscribeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.UnSubscribeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.UnSubscribeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.UnSubscribeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 recvHandle = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.UnSubscribeParams.prototype.getRecvhandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.UnSubscribeParams.prototype.setRecvhandle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.UnSubscribeParams.prototype.clearRecvhandle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.UnSubscribeParams.prototype.hasRecvhandle = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetRawDataResolutionParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetRawDataResolutionParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetRawDataResolutionParams.displayName = 'proto.com.electron.sdk.proto.SetRawDataResolutionParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetRawDataResolutionParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetRawDataResolutionParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetRawDataResolutionParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetRawDataResolutionParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    resolution: jspb.Message.getField(msg, 1),
    recvhandle: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetRawDataResolutionParams}
 */
proto.com.electron.sdk.proto.SetRawDataResolutionParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetRawDataResolutionParams;
  return proto.com.electron.sdk.proto.SetRawDataResolutionParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetRawDataResolutionParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetRawDataResolutionParams}
 */
proto.com.electron.sdk.proto.SetRawDataResolutionParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResolution(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRecvhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetRawDataResolutionParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetRawDataResolutionParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetRawDataResolutionParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetRawDataResolutionParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional int32 resolution = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.SetRawDataResolutionParams.prototype.getResolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SetRawDataResolutionParams.prototype.setResolution = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetRawDataResolutionParams.prototype.clearResolution = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetRawDataResolutionParams.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 recvHandle = 2;
 * @return {number}
 */
proto.com.electron.sdk.proto.SetRawDataResolutionParams.prototype.getRecvhandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SetRawDataResolutionParams.prototype.setRecvhandle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SetRawDataResolutionParams.prototype.clearRecvhandle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetRawDataResolutionParams.prototype.hasRecvhandle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.GetResolutionParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.GetResolutionParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.GetResolutionParams.displayName = 'proto.com.electron.sdk.proto.GetResolutionParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.GetResolutionParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.GetResolutionParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.GetResolutionParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.GetResolutionParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    recvhandle: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.GetResolutionParams}
 */
proto.com.electron.sdk.proto.GetResolutionParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.GetResolutionParams;
  return proto.com.electron.sdk.proto.GetResolutionParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.GetResolutionParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.GetResolutionParams}
 */
proto.com.electron.sdk.proto.GetResolutionParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRecvhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.GetResolutionParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.GetResolutionParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.GetResolutionParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.GetResolutionParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 recvHandle = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.GetResolutionParams.prototype.getRecvhandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.GetResolutionParams.prototype.setRecvhandle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.GetResolutionParams.prototype.clearRecvhandle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.GetResolutionParams.prototype.hasRecvhandle = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.GetRawDataTypeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.GetRawDataTypeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.GetRawDataTypeParams.displayName = 'proto.com.electron.sdk.proto.GetRawDataTypeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.GetRawDataTypeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.GetRawDataTypeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.GetRawDataTypeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.GetRawDataTypeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    recvhandle: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.GetRawDataTypeParams}
 */
proto.com.electron.sdk.proto.GetRawDataTypeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.GetRawDataTypeParams;
  return proto.com.electron.sdk.proto.GetRawDataTypeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.GetRawDataTypeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.GetRawDataTypeParams}
 */
proto.com.electron.sdk.proto.GetRawDataTypeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRecvhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.GetRawDataTypeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.GetRawDataTypeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.GetRawDataTypeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.GetRawDataTypeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 recvHandle = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.GetRawDataTypeParams.prototype.getRecvhandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.GetRawDataTypeParams.prototype.setRecvhandle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.GetRawDataTypeParams.prototype.clearRecvhandle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.GetRawDataTypeParams.prototype.hasRecvhandle = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.GetUserIdParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.GetUserIdParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.GetUserIdParams.displayName = 'proto.com.electron.sdk.proto.GetUserIdParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.GetUserIdParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.GetUserIdParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.GetUserIdParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.GetUserIdParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    recvhandle: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.GetUserIdParams}
 */
proto.com.electron.sdk.proto.GetUserIdParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.GetUserIdParams;
  return proto.com.electron.sdk.proto.GetUserIdParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.GetUserIdParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.GetUserIdParams}
 */
proto.com.electron.sdk.proto.GetUserIdParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRecvhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.GetUserIdParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.GetUserIdParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.GetUserIdParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.GetUserIdParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 recvHandle = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.GetUserIdParams.prototype.getRecvhandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.GetUserIdParams.prototype.setRecvhandle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.GetUserIdParams.prototype.clearRecvhandle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.GetUserIdParams.prototype.hasRecvhandle = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.displayName = 'proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams}
 */
proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams;
  return proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams}
 */
proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.RetrieveParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.RetrieveParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.RetrieveParams.displayName = 'proto.com.electron.sdk.proto.RetrieveParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.RetrieveParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.RetrieveParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.RetrieveParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RetrieveParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    countrycode: jspb.Message.getField(msg, 1),
    phonenum: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.RetrieveParams}
 */
proto.com.electron.sdk.proto.RetrieveParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.RetrieveParams;
  return proto.com.electron.sdk.proto.RetrieveParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.RetrieveParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.RetrieveParams}
 */
proto.com.electron.sdk.proto.RetrieveParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.RetrieveParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.RetrieveParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.RetrieveParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.RetrieveParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string countryCode = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.RetrieveParams.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.RetrieveParams.prototype.setCountrycode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.RetrieveParams.prototype.clearCountrycode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RetrieveParams.prototype.hasCountrycode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string phoneNum = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.RetrieveParams.prototype.getPhonenum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.RetrieveParams.prototype.setPhonenum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.RetrieveParams.prototype.clearPhonenum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.RetrieveParams.prototype.hasPhonenum = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.VerifyParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.VerifyParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.VerifyParams.displayName = 'proto.com.electron.sdk.proto.VerifyParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.VerifyParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.VerifyParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.VerifyParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.VerifyParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    countrycode: jspb.Message.getField(msg, 1),
    phonenum: jspb.Message.getField(msg, 2),
    verificationcode: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.VerifyParams}
 */
proto.com.electron.sdk.proto.VerifyParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.VerifyParams;
  return proto.com.electron.sdk.proto.VerifyParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.VerifyParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.VerifyParams}
 */
proto.com.electron.sdk.proto.VerifyParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerificationcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.VerifyParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.VerifyParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.VerifyParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.VerifyParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string countryCode = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.VerifyParams.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.VerifyParams.prototype.setCountrycode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.VerifyParams.prototype.clearCountrycode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.VerifyParams.prototype.hasCountrycode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string phoneNum = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.VerifyParams.prototype.getPhonenum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.VerifyParams.prototype.setPhonenum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.VerifyParams.prototype.clearPhonenum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.VerifyParams.prototype.hasPhonenum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string verificationCode = 3;
 * @return {string}
 */
proto.com.electron.sdk.proto.VerifyParams.prototype.getVerificationcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.VerifyParams.prototype.setVerificationcode = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.com.electron.sdk.proto.VerifyParams.prototype.clearVerificationcode = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.VerifyParams.prototype.hasVerificationcode = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.displayName = 'proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    countrycode: jspb.Message.getField(msg, 1),
    phonenum: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams}
 */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams;
  return proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams}
 */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string countryCode = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.prototype.setCountrycode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.prototype.clearCountrycode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.prototype.hasCountrycode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string phoneNum = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.prototype.getPhonenum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.prototype.setPhonenum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.prototype.clearPhonenum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetDefaultCellPhoneInfoParams.prototype.hasPhonenum = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.displayName = 'proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams}
 */
proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams;
  return proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams}
 */
proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SelectMicParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SelectMicParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SelectMicParams.displayName = 'proto.com.electron.sdk.proto.SelectMicParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SelectMicParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SelectMicParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SelectMicParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SelectMicParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getField(msg, 1),
    devicename: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SelectMicParams}
 */
proto.com.electron.sdk.proto.SelectMicParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SelectMicParams;
  return proto.com.electron.sdk.proto.SelectMicParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SelectMicParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SelectMicParams}
 */
proto.com.electron.sdk.proto.SelectMicParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SelectMicParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SelectMicParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SelectMicParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SelectMicParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string deviceID = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.SelectMicParams.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SelectMicParams.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SelectMicParams.prototype.clearDeviceid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SelectMicParams.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string deviceName = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.SelectMicParams.prototype.getDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SelectMicParams.prototype.setDevicename = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SelectMicParams.prototype.clearDevicename = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SelectMicParams.prototype.hasDevicename = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SelectSpeakerParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SelectSpeakerParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SelectSpeakerParams.displayName = 'proto.com.electron.sdk.proto.SelectSpeakerParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SelectSpeakerParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SelectSpeakerParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SelectSpeakerParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SelectSpeakerParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getField(msg, 1),
    devicename: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SelectSpeakerParams}
 */
proto.com.electron.sdk.proto.SelectSpeakerParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SelectSpeakerParams;
  return proto.com.electron.sdk.proto.SelectSpeakerParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SelectSpeakerParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SelectSpeakerParams}
 */
proto.com.electron.sdk.proto.SelectSpeakerParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SelectSpeakerParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SelectSpeakerParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SelectSpeakerParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SelectSpeakerParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string deviceID = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.SelectSpeakerParams.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SelectSpeakerParams.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SelectSpeakerParams.prototype.clearDeviceid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SelectSpeakerParams.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string deviceName = 2;
 * @return {string}
 */
proto.com.electron.sdk.proto.SelectSpeakerParams.prototype.getDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SelectSpeakerParams.prototype.setDevicename = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.SelectSpeakerParams.prototype.clearDevicename = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SelectSpeakerParams.prototype.hasDevicename = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAutoJoinAudioParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAutoJoinAudioParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.displayName = 'proto.com.electron.sdk.proto.EnableAutoJoinAudioParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAutoJoinAudioParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAutoJoinAudioParams}
 */
proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAutoJoinAudioParams;
  return proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAutoJoinAudioParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAutoJoinAudioParams}
 */
proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAutoJoinAudioParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAutoJoinAudioParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAutoAdjustMicParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.displayName = 'proto.com.electron.sdk.proto.EnableAutoAdjustMicParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAutoAdjustMicParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAutoAdjustMicParams}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAutoAdjustMicParams;
  return proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAutoAdjustMicParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAutoAdjustMicParams}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAutoAdjustMicParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAutoAdjustMicParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableStereoAudioParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableStereoAudioParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableStereoAudioParams.displayName = 'proto.com.electron.sdk.proto.EnableStereoAudioParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableStereoAudioParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableStereoAudioParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableStereoAudioParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableStereoAudioParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableStereoAudioParams}
 */
proto.com.electron.sdk.proto.EnableStereoAudioParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableStereoAudioParams;
  return proto.com.electron.sdk.proto.EnableStereoAudioParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableStereoAudioParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableStereoAudioParams}
 */
proto.com.electron.sdk.proto.EnableStereoAudioParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableStereoAudioParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableStereoAudioParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableStereoAudioParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableStereoAudioParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableStereoAudioParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableStereoAudioParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableStereoAudioParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableStereoAudioParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableMicOriginalInputParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableMicOriginalInputParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableMicOriginalInputParams.displayName = 'proto.com.electron.sdk.proto.EnableMicOriginalInputParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableMicOriginalInputParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableMicOriginalInputParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableMicOriginalInputParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableMicOriginalInputParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableMicOriginalInputParams}
 */
proto.com.electron.sdk.proto.EnableMicOriginalInputParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableMicOriginalInputParams;
  return proto.com.electron.sdk.proto.EnableMicOriginalInputParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableMicOriginalInputParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableMicOriginalInputParams}
 */
proto.com.electron.sdk.proto.EnableMicOriginalInputParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableMicOriginalInputParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableMicOriginalInputParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableMicOriginalInputParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableMicOriginalInputParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableMicOriginalInputParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableMicOriginalInputParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableMicOriginalInputParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableMicOriginalInputParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.displayName = 'proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams}
 */
proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams;
  return proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams}
 */
proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.displayName = 'proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams}
 */
proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams;
  return proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams}
 */
proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.displayName = 'proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams}
 */
proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams;
  return proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams}
 */
proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableSuppressAudioNotifyParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetEchoCancellationLevelParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetEchoCancellationLevelParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.displayName = 'proto.com.electron.sdk.proto.SetEchoCancellationLevelParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetEchoCancellationLevelParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    level: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetEchoCancellationLevelParams}
 */
proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetEchoCancellationLevelParams;
  return proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetEchoCancellationLevelParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetEchoCancellationLevelParams}
 */
proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetEchoCancellationLevelParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 level = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.prototype.clearLevel = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetEchoCancellationLevelParams.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetMicVolParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetMicVolParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetMicVolParams.displayName = 'proto.com.electron.sdk.proto.SetMicVolParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetMicVolParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetMicVolParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetMicVolParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetMicVolParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getOptionalFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetMicVolParams}
 */
proto.com.electron.sdk.proto.SetMicVolParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetMicVolParams;
  return proto.com.electron.sdk.proto.SetMicVolParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetMicVolParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetMicVolParams}
 */
proto.com.electron.sdk.proto.SetMicVolParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetMicVolParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetMicVolParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetMicVolParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetMicVolParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float value = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.SetMicVolParams.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SetMicVolParams.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetMicVolParams.prototype.clearValue = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetMicVolParams.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetSpeakerVolParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetSpeakerVolParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetSpeakerVolParams.displayName = 'proto.com.electron.sdk.proto.SetSpeakerVolParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetSpeakerVolParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetSpeakerVolParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetSpeakerVolParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetSpeakerVolParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getOptionalFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetSpeakerVolParams}
 */
proto.com.electron.sdk.proto.SetSpeakerVolParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetSpeakerVolParams;
  return proto.com.electron.sdk.proto.SetSpeakerVolParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetSpeakerVolParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetSpeakerVolParams}
 */
proto.com.electron.sdk.proto.SetSpeakerVolParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetSpeakerVolParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetSpeakerVolParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetSpeakerVolParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetSpeakerVolParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float value = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.SetSpeakerVolParams.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.SetSpeakerVolParams.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetSpeakerVolParams.prototype.clearValue = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetSpeakerVolParams.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableDualScreenModeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableDualScreenModeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableDualScreenModeParams.displayName = 'proto.com.electron.sdk.proto.EnableDualScreenModeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableDualScreenModeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableDualScreenModeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableDualScreenModeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableDualScreenModeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableDualScreenModeParams}
 */
proto.com.electron.sdk.proto.EnableDualScreenModeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableDualScreenModeParams;
  return proto.com.electron.sdk.proto.EnableDualScreenModeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableDualScreenModeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableDualScreenModeParams}
 */
proto.com.electron.sdk.proto.EnableDualScreenModeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableDualScreenModeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableDualScreenModeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableDualScreenModeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableDualScreenModeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableDualScreenModeParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableDualScreenModeParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableDualScreenModeParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableDualScreenModeParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.displayName = 'proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bturnoff: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams}
 */
proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams;
  return proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams}
 */
proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBturnoff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bTurnOff = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.prototype.getBturnoff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.prototype.setBturnoff = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.prototype.clearBturnoff = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.TurnOffAeroModeInSharingParams.prototype.hasBturnoff = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.displayName = 'proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams}
 */
proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams;
  return proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams}
 */
proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.displayName = 'proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams}
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams;
  return proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams}
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableSplitScreenModeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableSplitScreenModeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableSplitScreenModeParams.displayName = 'proto.com.electron.sdk.proto.EnableSplitScreenModeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableSplitScreenModeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableSplitScreenModeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableSplitScreenModeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableSplitScreenModeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableSplitScreenModeParams}
 */
proto.com.electron.sdk.proto.EnableSplitScreenModeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableSplitScreenModeParams;
  return proto.com.electron.sdk.proto.EnableSplitScreenModeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableSplitScreenModeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableSplitScreenModeParams}
 */
proto.com.electron.sdk.proto.EnableSplitScreenModeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableSplitScreenModeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableSplitScreenModeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableSplitScreenModeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableSplitScreenModeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableSplitScreenModeParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableSplitScreenModeParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableSplitScreenModeParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableSplitScreenModeParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.displayName = 'proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams}
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams;
  return proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams}
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.displayName = 'proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams}
 */
proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams;
  return proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams}
 */
proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.displayName = 'proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams}
 */
proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams;
  return proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams}
 */
proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.displayName = 'proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams}
 */
proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams;
  return proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams}
 */
proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.displayName = 'proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams}
 */
proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams;
  return proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams}
 */
proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetRecordingPathParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetRecordingPathParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetRecordingPathParams.displayName = 'proto.com.electron.sdk.proto.SetRecordingPathParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetRecordingPathParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetRecordingPathParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetRecordingPathParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetRecordingPathParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    recpath: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetRecordingPathParams}
 */
proto.com.electron.sdk.proto.SetRecordingPathParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetRecordingPathParams;
  return proto.com.electron.sdk.proto.SetRecordingPathParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetRecordingPathParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetRecordingPathParams}
 */
proto.com.electron.sdk.proto.SetRecordingPathParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetRecordingPathParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetRecordingPathParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetRecordingPathParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetRecordingPathParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string recPath = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetRecordingPathParams.prototype.getRecpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetRecordingPathParams.prototype.setRecpath = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetRecordingPathParams.prototype.clearRecpath = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetRecordingPathParams.prototype.hasRecpath = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.displayName = 'proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams}
 */
proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams;
  return proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams}
 */
proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.displayName = 'proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams}
 */
proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams;
  return proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams}
 */
proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableMultiAudioStreamRecordParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.displayName = 'proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams}
 */
proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams;
  return proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams}
 */
proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAddTimestampWatermarkParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.displayName = 'proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams}
 */
proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams;
  return proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams}
 */
proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.displayName = 'proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams}
 */
proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams;
  return proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams}
 */
proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.displayName = 'proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams}
 */
proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams;
  return proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams}
 */
proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.displayName = 'proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams}
 */
proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams;
  return proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams}
 */
proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.displayName = 'proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams}
 */
proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams;
  return proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams}
 */
proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.prototype.clearBdisable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.DisableAccountSettingTabPageParams.prototype.hasBdisable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.displayName = 'proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    showoption: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams}
 */
proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams;
  return proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams}
 */
proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setShowoption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 showOption = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.prototype.getShowoption = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.prototype.setShowoption = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.prototype.clearShowoption = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.ConfSettingDialogShownTabPageParams.prototype.hasShowoption = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SelectVideoCameraParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SelectVideoCameraParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SelectVideoCameraParams.displayName = 'proto.com.electron.sdk.proto.SelectVideoCameraParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SelectVideoCameraParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SelectVideoCameraParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SelectVideoCameraParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SelectVideoCameraParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SelectVideoCameraParams}
 */
proto.com.electron.sdk.proto.SelectVideoCameraParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SelectVideoCameraParams;
  return proto.com.electron.sdk.proto.SelectVideoCameraParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SelectVideoCameraParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SelectVideoCameraParams}
 */
proto.com.electron.sdk.proto.SelectVideoCameraParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SelectVideoCameraParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SelectVideoCameraParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SelectVideoCameraParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SelectVideoCameraParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string deviceID = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.SelectVideoCameraParams.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SelectVideoCameraParams.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SelectVideoCameraParams.prototype.clearDeviceid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SelectVideoCameraParams.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.displayName = 'proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams}
 */
proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams;
  return proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams}
 */
proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableVideoMirrorEffectParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.displayName = 'proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams}
 */
proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams;
  return proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams}
 */
proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableFaceBeautyEffectParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableHDVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableHDVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableHDVideoParams.displayName = 'proto.com.electron.sdk.proto.EnableHDVideoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableHDVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableHDVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableHDVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableHDVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableHDVideoParams}
 */
proto.com.electron.sdk.proto.EnableHDVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableHDVideoParams;
  return proto.com.electron.sdk.proto.EnableHDVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableHDVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableHDVideoParams}
 */
proto.com.electron.sdk.proto.EnableHDVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableHDVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableHDVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableHDVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableHDVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableHDVideoParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableHDVideoParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableHDVideoParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableHDVideoParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.displayName = 'proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams}
 */
proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams;
  return proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams}
 */
proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.displayName = 'proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams}
 */
proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams;
  return proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams}
 */
proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableVideoPreviewDialogParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.displayName = 'proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams}
 */
proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams;
  return proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams}
 */
proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.displayName = 'proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params}
 */
proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params;
  return proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params}
 */
proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableAlwaysUse16v9Params.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableSpotlightSelfParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableSpotlightSelfParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableSpotlightSelfParams.displayName = 'proto.com.electron.sdk.proto.EnableSpotlightSelfParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableSpotlightSelfParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableSpotlightSelfParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableSpotlightSelfParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableSpotlightSelfParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableSpotlightSelfParams}
 */
proto.com.electron.sdk.proto.EnableSpotlightSelfParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableSpotlightSelfParams;
  return proto.com.electron.sdk.proto.EnableSpotlightSelfParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableSpotlightSelfParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableSpotlightSelfParams}
 */
proto.com.electron.sdk.proto.EnableSpotlightSelfParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableSpotlightSelfParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableSpotlightSelfParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableSpotlightSelfParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableSpotlightSelfParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableSpotlightSelfParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableSpotlightSelfParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableSpotlightSelfParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableSpotlightSelfParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableHardwareEncodeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableHardwareEncodeParams.displayName = 'proto.com.electron.sdk.proto.EnableHardwareEncodeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableHardwareEncodeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableHardwareEncodeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1),
    encodetype: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableHardwareEncodeParams}
 */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableHardwareEncodeParams;
  return proto.com.electron.sdk.proto.EnableHardwareEncodeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableHardwareEncodeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableHardwareEncodeParams}
 */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEncodetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableHardwareEncodeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableHardwareEncodeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableHardwareEncodeParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 encodeType = 2;
 * @return {number}
 */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams.prototype.getEncodetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams.prototype.setEncodetype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.com.electron.sdk.proto.EnableHardwareEncodeParams.prototype.clearEncodetype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableHardwareEncodeParams.prototype.hasEncodetype = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.displayName = 'proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    encodetype: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams}
 */
proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams;
  return proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams}
 */
proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEncodetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 encodeType = 1;
 * @return {number}
 */
proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.prototype.getEncodetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.prototype.setEncodetype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.prototype.clearEncodetype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.IsHardwareEncodeEnabledParams.prototype.hasEncodetype = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.displayName = 'proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams}
 */
proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams;
  return proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams}
 */
proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.Enable49VideoesInGallaryViewParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.displayName = 'proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams}
 */
proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams;
  return proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams}
 */
proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.prototype.setBenable = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.prototype.clearBenable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.sdk.proto.SetTeamIdentifierParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.sdk.proto.SetTeamIdentifierParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.electron.sdk.proto.SetTeamIdentifierParams.displayName = 'proto.com.electron.sdk.proto.SetTeamIdentifierParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.sdk.proto.SetTeamIdentifierParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.sdk.proto.SetTeamIdentifierParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.sdk.proto.SetTeamIdentifierParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetTeamIdentifierParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.sdk.proto.SetTeamIdentifierParams}
 */
proto.com.electron.sdk.proto.SetTeamIdentifierParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.sdk.proto.SetTeamIdentifierParams;
  return proto.com.electron.sdk.proto.SetTeamIdentifierParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.sdk.proto.SetTeamIdentifierParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.sdk.proto.SetTeamIdentifierParams}
 */
proto.com.electron.sdk.proto.SetTeamIdentifierParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.sdk.proto.SetTeamIdentifierParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.sdk.proto.SetTeamIdentifierParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.sdk.proto.SetTeamIdentifierParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.sdk.proto.SetTeamIdentifierParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.com.electron.sdk.proto.SetTeamIdentifierParams.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.electron.sdk.proto.SetTeamIdentifierParams.prototype.setIdentifier = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.com.electron.sdk.proto.SetTeamIdentifierParams.prototype.clearIdentifier = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.electron.sdk.proto.SetTeamIdentifierParams.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.com.electron.sdk.proto);
